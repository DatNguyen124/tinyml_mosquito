/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 17.12.2024 23:24:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 13648;
#else
constexpr int kTensorArenaSize = 12624;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,5135 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 79, 65, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 79, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 40, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 40, 1, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data5[2] = { -1, 1280, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { -462, 227, 992, -399, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 7.6774667832069099e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[4*1280] = { 
  -39, 44, -21, -61, 10, -6, 17, -11, 17, 37, 51, -11, -26, -21, -34, 7, 34, 39, 35, -10, 25, -58, 1, -48, -11, 2, -29, 11, -39, 16, 31, 12, -45, 32, -27, 18, 11, 6, -32, -33, -27, 70, 2, -32, 18, -8, -37, -14, 9, 15, 17, 13, 52, 5, -33, 27, 9, 10, -46, -26, -30, -28, 24, -30, -41, 20, -14, -55, 7, 1, 48, -8, 18, 52, 50, -5, -17, -4, -30, 7, 34, 47, 54, -27, 20, -42, 4, -17, -7, 2, -17, -13, -55, -14, 23, 2, -45, 46, 0, 34, -3, 4, -17, -34, -54, 70, -8, -41, -1, -3, -25, -21, -5, 20, 5, 14, 48, -5, -23, 31, 11, 39, -52, -19, -37, -87, 11, -54, -38, 30, -18, -20, 4, -12, 31, 5, 19, 34, 28, -42, -12, -45, -24, 14, 33, 32, 20, -5, -3, -10, -33, -15, -22, -6, 7, -32, -53, -20, 30, 15, -40, 22, 4, 29, -39, 5, -8, -21, -40, 48, -20, -42, 8, 18, -37, -9, -3, 15, 7, 18, 20, 1, -26, -1, 0, 7, -24, 2, 10, -22, -30, -59, -39, 34, -7, -43, 6, -2, 38, 11, 12, 28, 42, -10, -24, 18, -8, 8, 54, 46, 33, -47, -2, -50, 2, -44, -23, 12, -33, -53, -32, 1, 28, 16, -68, 48, 8, 50, -23, -1, -6, -30, -53, 53, 3, -12, 5, 20, -55, 9, -1, -2, 8, 24, 43, -2, -14, 24, 18, 11, -38, 23, 6, -37, 20, -12, -25, 23, -10, -3, 6, 23, 25, 18, 4, 26, 34, -13, -7, -30, -33, 1, 30, 46, 23, -27, -1, -25, 2, 16, -21, -4, 23, -19, -16, -16, 23, -5, -41, 25, -16, 16, -32, 3, 9, -28, -39, 40, -10, -18, 2, 1, -59, -16, 3, 2, 7, 20, 25, 2, -9, 13, 16, -24, -25, -3, 11, 43, 3, -14, -33, 17, -17, -62, 12, 17, 12, 19, 8, 4, 6, -18, -43, -7, -30, 3, 21, 36, 33, -13, -12, -40, -13, -44, -16, 14, -26, -18, -14, 0, 28, 14, -34, 21, -10, 33, -11, 2, -13, -8, -14, 41, 0, -17, 1, -31, -54, 2, 10, 2, 4, 12, 14, -10, -34, 0, 28, -11, -42, -7, -12, 50, -4, -12, -44, 22, -40, -70, 4, 0, 18, -8, 27, 35, 32, -5, -37, -9, -33, 20, 38, 55, 25, -29, 8, -48, 15, -31, -16, 11, -18, -40, -42, -5, 2, 1, -50, 28, -25, 21, -38, 13, 6, -39, -41, 36, 5, -7, -4, -16, -39, -8, -8, -9, 6, 17, 38, 9, -15, 10, 12, 11, -41, -11, -20, -50, 21, -16, -24, 10, -61, -8, 4, -18, 20, -4, -16, 9, 34, -25, -11, -24, -38, 24, 32, 5, 14, -26, -19, -34, -38, 3, -29, -4, 1, -25, -41, -26, 14, -2, -25, 7, 17, 23, -23, 9, 10, -36, -34, 18, -22, -35, -1, -10, 0, -20, 11, -2, 3, 21, 17, 6, -28, -10, 11, -13, -13, 1, -14, 5, -9, -45, -47, 39, -77, -21, -7, -11, 42, -23, 18, 35, 35, -6, -22, 6, -55, 6, 59, 56, 22, -35, 11, -46, -4, -29, -14, 8, -21, -34, -21, -6, 32, 14, -26, 41, -1, 41, -44, 5, -6, -61, -81, 49, 4, -27, 19, -6, -21, -1, -10, -13, 5, 13, 46, 16, -44, -5, 10, 11, -31, 19, 9, -34, 6, -12, -19, 21, -53, -8, 18, -6, 22, -7, 11, 35, 36, -14, -31, -10, -40, 18, 32, 43, 13, -6, -6, -13, -14, 8, -29, 9, -14, -31, -28, -21, 18, -8, -18, 24, -29, 20, -23, 19, -15, -28, -26, 63, -1, -29, 7, -20, -34, -37, 18, -2, 9, 1, 21, -5, -35, 7, 13, -26, 13, 7, -6, 1, 2, -20, -34, -2, -29, -52, 8, -15, 22, -6, 16, 29, 23, -7, -52, 1, -23, 7, 47, 52, 17, -29, 9, -31, -11, -34, -20, 13, -41, 5, -16, 8, 19, 8, -23, 27, 7, 30, -12, -3, -31, -7, -9, 31, 11, -31, 2, -45, -40, -44, 20, -5, 10, 8, 50, -8, -31, 22, 14, 9, -24, -40, -30, 7, -32, -21, -50, 17, -53, -74, 10, -9, 24, -13, 21, 43, 44, -14, -24, -10, -47, 22, 37, 36, 26, -21, 18, -44, -12, -40, -4, 14, -36, -16, -40, 0, 29, -8, -23, 25, -21, 14, -26, -7, -20, -52, -45, 31, 8, -3, 6, -20, -23, -13, -1, 7, 1, 2, 29, -1, -12, 17, 3, 0, -48, 14, 17, -39, 5, -5, -32, 25, -48, -36, 6, 14, 20, 3, -15, 22, 27, -25, -16, -22, -61, 35, 43, 37, 18, -5, -19, -46, -48, -41, -6, -30, -20, -11, -42, -21, 16, -2, -19, 44, 4, 16, -12, 1, -3, -33, -45, 29, -1, -24, 5, -18, -17, -21, 10, 14, 7, 4, 28, 4, -22, -11, 18, -1, -23, -3, -25, -1, 6, -57, -65, 34, -64, -47, 16, -27, 37, -25, 21, 4, 34, -3, -20, 18, -49, 22, 52, 37, 28, -23, 10, -18, 0, -36, -13, 0, -6, -23, -34, -3, 22, 22, -41, 29, -2, 41, -36, 4, -1, -69, -45, 50, 12, -11, 21, 9, -31, -15, -5, -18, 3, 23, 41, 10, -29, 5, 28, 7, -37, 6, -16, -43, 21, -31, -25, 18, -51, -21, 9, -13, 29, 8, 7, 30, 44, -19, -40, -31, -36, 12, 37, 45, 14, -20, 3, -7, -18, 7, -49, -2, 2, -9, -39, -8, 6, -10, -20, 35, -25, 25, -11, 3, 8, -51, -24, 53, -18, -19, 2, 5, -13, -21, -4, -10, 2, -3, 26, -2, -33, -22, 1, 8, -19, -3, 1, -34, -24, -11, -32, 9, -15, -46, 8, 0, 21, 9, 11, 10, 31, 1, -11, -4, -34, 5, 36, 53, 28, -27, -2, -52, -4, -44, -21, 9, -43, -12, -36, 10, 11, 20, -51, 21, 11, 44, -1, -8, -11, -18, -12, 47, 6, 3, 11, -27, -38, -10, -1, 13, 6, 7, 28, -14, -28, 10, 17, 13, -51, -16, -20, -22, -38, 2, -36, 5, -25, -56, 25, -18, 33, -15, 35, 27, 35, -7, -34, -8, -50, 13, 39, 50, 26, -5, 21, -30, 9, -9, -19, 10, -23, -38, -66, -11, 9, 12, -33, 27, -27, 29, -31, -5, -8, -44, -42, 54, 17, -31, 2, 18, -27, -15, 6, 6, -3, 13, 27, 1, -21, 20, 2, 2, -37, -8, -29, -45, 1, -6, -31, 18, -51, -44, 18, 0, 21, -13, 8, 17, 30, -15, -24, -27, -28, 8, 25, 28, 9, 5, -31, -14, -16, -30, -14, -20, -12, -7, -28, 8, 15, 16, -9, 18, -2, 32, -17, 6, -8, -14, -24, 22, -12, -49, 9, 3, 1, -28, -2, 12, 11, 8, 27, 2, -27, -5, 19, 27, -14, -14, -36, -52, 32, -54, -46, 35, -28, -14, 6, -20, 33, -28, 25, 22, 53, -10, -2, 0, -38, 15, 46, 61, 37, -35, 8, -26, 2, -28, -21, 2, -24, -39, -51, 0, 46, 10, -25, 45, 14, 38, -34, 14, -18, -21, -69, 54, 4, -48, 8, 4, -21, -15, -12, 2, 10, 15, 52, -3, -32, -9, 19, 18, -33, 9, -1, -13, -6, -34, -38, 26, -18, -22, 20, -31, 51, -16, 29, 29, 64, -26, -27, -29, -37, 6, 64, 72, 45, -29, 1, 15, 5, 2, -44, -5, 9, -41, -34, -1, 5, -1, -9, 44, 0, 17, -61, 15, -6, -45, -43, 62, -9, -19, 17, 19, -35, -32, -1, -11, 3, 6, 46, -6, -62, 5, 27, 16, -6, -2, 20, -14, -17, -29, 
  -3, 4, 20, 33, 7, 28, -1, 57, 9, 29, -22, -60, 39, -62, 11, 29, -14, -1, 28, 47, -49, 20, -41, 19, 41, -63, 8, 14, -49, 3, 29, -1, 32, 6, 46, 18, 8, 9, 6, 19, 7, -54, -90, -57, -48, -5, 16, -59, 14, 29, 21, 20, -54, 11, 19, -56, 32, 20, 28, -19, -35, -28, -15, -56, 25, -22, 20, 24, 5, 11, -41, 21, -13, -25, -56, -35, 25, -35, 28, 7, -50, -43, -16, 33, -39, -8, -16, 29, 36, -42, 11, 5, -12, 23, 5, -3, 11, -28, 32, -17, 28, 8, 2, 20, 27, -67, -39, -13, -30, -38, 29, 6, 7, -11, -3, -6, -58, -6, 41, -24, 19, -1, 37, -16, -26, 41, -14, -10, 12, -13, 20, -18, 5, 14, -5, 11, -9, -11, -46, -35, 30, -42, 23, 0, -27, -45, -13, 4, -42, 1, -9, 21, 22, -31, -13, 11, -23, 22, 7, 10, 18, -7, 30, -27, 25, -4, 8, 16, 14, -38, -46, -16, -42, -65, 34, -22, 1, 5, -3, -5, -34, 19, 22, -17, -1, 9, 1, -28, -41, -2, -9, -14, 11, -13, 17, -19, 11, 14, -4, 20, -16, 17, -42, -55, 32, -60, -21, 21, -41, -27, -10, 24, -54, 8, -42, 11, 24, -38, 3, 6, -57, 9, 10, 6, 17, 5, 32, -38, 28, 11, -6, 12, 1, -13, -54, -67, -37, -55, 0, -81, 16, 18, 7, 18, -29, 15, 35, -20, -7, 5, 1, -28, -33, 15, -18, -43, -5, -8, 25, -29, 7, 7, 1, 18, -8, 15, -12, -80, 34, -71, -6, 16, -13, -26, 9, 28, -56, -8, -50, -19, 33, -51, -35, 18, -62, -8, 26, 28, 7, 4, 43, -14, 39, -2, -16, 13, 10, -21, -72, -88, -30, -44, 32, -43, 11, 22, 8, 9, -33, 14, 30, -38, 11, 30, 6, -16, -40, -21, 23, -77, 11, -10, 32, 8, 2, 38, -6, 31, -25, 27, -6, -55, 32, -37, -5, 8, -37, -37, 11, 13, -41, 3, -32, 17, 41, -49, 3, 22, -43, 3, 4, 33, 4, -15, 48, 4, 9, 9, 1, 21, 8, -49, -52, -51, -29, -17, 12, -32, 12, 16, 8, 10, -41, 4, 46, -23, 8, 22, 18, -22, -34, -24, 4, -35, 6, -12, 48, 0, 27, 5, -37, 26, -9, -9, -43, -34, 43, -33, 17, 8, -46, -48, -26, 7, -20, 4, -15, 14, 24, -24, -8, 16, -29, 24, 6, 34, 21, -16, 43, -34, 30, -7, -14, 22, 16, -49, -29, -9, -22, -57, 30, 27, 4, 17, -2, -6, -43, 0, 30, -29, -3, 13, 9, -34, -48, 22, -9, -17, 1, -13, 45, -26, 8, 8, 5, 26, 15, -12, -28, -21, 37, -48, 19, 2, -8, -10, -12, 0, -18, -3, 7, -4, 36, -32, -24, 6, -25, 27, 4, 29, 20, -10, 21, -3, 32, -8, 2, 25, 16, -23, -49, -24, -11, -61, 6, -7, 13, 9, -5, 3, -4, 1, 28, -24, -16, 22, 17, -45, -69, -6, 7, -15, -4, -16, 41, -20, 18, 28, -2, 28, -18, -4, -25, -61, 44, -83, 18, 18, -41, -23, -4, 31, -26, 1, 2, 8, 40, -54, -5, 32, -59, 6, -5, 28, 28, 7, 44, -45, 53, 4, -3, 23, 46, -21, -54, -47, -45, -76, 5, -60, 13, 8, 9, 5, -30, 11, 45, -4, 3, 4, 18, -25, -55, 14, -22, -42, -4, -17, 34, -40, 2, 41, -1, 53, -19, -8, -36, -71, 46, -68, 12, 12, -22, -26, 16, 21, -65, -26, -53, -28, 36, -59, -2, 16, -53, 6, 29, 18, 4, -2, 21, -14, 50, 13, 12, 1, 12, -28, -68, -69, -36, -50, 27, -36, 7, 17, 16, 1, -19, 8, 20, -29, 12, 34, -8, -22, -59, -38, -20, -59, 1, 12, 41, -6, -1, 52, 0, 47, -10, 8, -3, -44, 26, -12, 11, 9, -25, -21, 15, 11, -59, 17, -21, 37, 22, -45, 20, 7, -21, -11, -13, -7, 11, -2, 4, -8, 1, 14, 44, 10, 1, -25, -61, -53, -15, -8, 18, -10, 6, -9, 10, 12, -39, 21, 14, -48, 21, -3, 30, 15, -36, 0, 6, -22, 15, -5, 47, -26, 15, 40, -39, 47, -10, -27, -55, -46, 28, -41, 11, 17, -33, -45, -8, 18, -26, 7, -23, 15, 26, -45, 11, 6, 10, 13, -4, 25, 8, -3, 31, -36, 24, 16, 9, 8, 5, -57, -35, -25, -19, -54, 23, -14, 17, 16, 0, 11, -27, 2, 18, -37, 25, 26, 16, -38, -74, 17, 24, -9, 13, -24, 16, -22, -3, 10, -1, 33, -4, 9, -40, -39, 35, -27, 22, -2, -42, -38, 12, -15, -40, -14, -5, 8, 30, -34, -27, 11, -25, 31, 11, 9, -3, -30, 34, -11, 17, -2, 8, 26, 18, -37, -48, -49, -33, -54, 10, -38, -5, 4, 7, -5, -26, 8, 37, -10, -14, 29, -3, -26, -63, -21, 6, -19, 4, -29, 28, -19, -4, 37, -19, 32, -18, 19, -34, -65, 38, -51, 0, 3, -49, -25, 1, 30, -26, 5, -8, 0, 37, -51, -27, 18, -44, 17, 12, 19, 30, 3, 43, -8, 31, -6, 6, 31, 23, -37, -65, -60, -42, -65, -4, -66, 4, 22, 4, 0, -25, 7, 49, -5, 19, 3, 12, -42, -51, 8, 11, -46, 3, -23, 45, -8, -7, 47, -10, 31, -1, 7, -42, -53, 57, -52, 18, 21, -25, -41, 7, 28, -26, -7, -42, -9, 52, -44, -29, 8, -50, 3, 6, 36, 11, -9, 49, -11, 42, 9, -2, 25, 24, -49, -65, -68, -41, -49, 29, -30, 10, 33, 6, -1, -29, 10, 51, 0, 35, 31, 2, -38, -76, 23, 58, -68, -6, -1, 10, 3, -8, 17, 0, 32, -14, 8, -10, -62, 0, -63, -3, 18, -34, -20, 14, 25, -34, 7, -15, 28, 21, -58, 7, 7, -50, 0, 24, 12, 6, 3, 13, -16, -16, 3, 10, 9, -25, -46, -59, -55, -22, -29, 18, -20, 7, 0, 15, 11, -20, 3, 8, -13, 29, 12, 27, -23, -51, -19, -32, -33, 8, -10, 32, -40, 5, 23, -42, 11, -1, -12, -47, -33, 26, -26, 13, 8, -30, -47, -18, 9, 0, -7, -11, -1, 38, -18, -15, 17, -4, 25, -16, 22, 5, 1, 42, -38, 39, 12, 2, 14, 7, -44, -33, -13, -23, -76, 10, 10, 8, 8, 6, 8, -16, 6, 31, -29, 24, 18, -6, -63, -83, 3, -7, -9, 6, -13, 37, -11, 6, 44, 6, 50, -2, 13, -29, -27, 48, -40, 24, 2, -33, 2, -5, -8, -31, -15, 1, 23, 39, -27, -25, -1, -32, 15, 7, 5, -7, 5, 33, -5, 40, 4, 6, 21, 12, -38, -34, -40, -7, -53, 2, -6, 7, 6, 7, 8, -31, 12, 49, -16, -7, 7, 13, -39, -27, 10, 12, -23, 2, -19, 12, -25, 7, 57, -11, 49, -15, 32, -42, -70, 42, -86, 12, 31, -44, -23, -1, 24, -36, -19, -16, -4, 46, -43, 1, 18, -50, 2, 18, 18, 3, 4, 35, -31, 46, 9, 5, 30, 27, -26, -88, -72, -44, -62, 18, -76, 19, 15, 5, 15, -25, 7, 58, -2, 12, 6, 3, -36, -18, 32, -16, -52, 19, -15, -4, -9, 0, 52, 13, 53, -16, 41, -31, -67, 61, -37, 16, 47, -23, -29, 12, 24, -44, -24, -61, 6, 73, -77, 1, 49, -32, 7, 23, 18, 9, 12, 30, 4, 51, 16, 11, 9, 40, -32, -47, -29, -48, -61, 49, -9, 17, 37, 22, 3, -30, 11, 62, -63, 20, 13, 9, -13, -54, -3, -24, -56, 
  4, -81, 30, -25, 31, 32, -23, 21, 58, -19, 1, 15, 2, 22, 21, -29, 22, -3, -15, -70, 47, -48, 70, -20, 3, 2, -36, -41, -8, 60, 18, 41, -86, -4, 29, 44, 3, -99, -38, 18, -32, -2, 11, 28, 6, -32, -10, 29, -84, -52, -99, -91, 7, -49, 14, 47, -4, 35, -25, -40, -51, 84, -29, 16, 10, -40, 14, -10, 8, -25, -15, -13, 46, -4, 11, 17, -67, 13, 14, -46, 27, 32, 19, -77, 31, -20, 84, -19, -50, 17, -15, -72, -5, 44, -8, 31, -33, -23, -48, 61, -96, -35, -27, 13, -26, 12, 8, 21, 8, -34, -78, 18, -44, -69, -62, -27, 0, -56, -4, 53, -12, 0, -28, -36, -33, 74, -9, 4, 17, -92, 31, 16, 0, 28, -46, -5, 11, -40, -3, 13, -23, 26, -2, -20, 16, -7, -6, -29, 20, -18, 65, -5, 12, -2, 4, -48, 4, 26, -15, 20, -54, -13, 0, 19, -6, -68, -44, 9, 16, -9, 10, 15, 3, -28, 16, 4, -71, -64, -73, -101, -1, -52, 19, 53, -41, 6, 16, -33, -26, 69, -18, 6, 12, -77, 20, 17, 3, 41, -51, 26, 12, -23, -19, 12, 16, 12, 31, -56, 4, -13, 1, -48, 18, 5, 32, -4, 33, 17, -21, -17, 10, 34, -30, 4, -30, -30, 18, 12, 1, -65, -49, 18, 31, -21, 11, 20, 1, -20, 38, 28, -81, -25, -89, -97, -9, -67, 7, 22, -41, 31, 37, -25, -25, 80, -35, 22, 13, -70, 3, 7, 23, 9, -29, -13, 29, -11, 2, 19, 0, 22, 20, -48, -2, 0, 9, -66, 38, -25, 45, -43, 4, 0, -21, -62, 7, 42, -22, 21, -84, -8, -7, 13, -22, -86, -20, 5, 0, 20, 14, 23, -15, -33, 15, 24, -112, -61, -97, -127, -1, -59, 19, 38, -44, 15, 5, -15, -11, 57, -37, 22, -7, -42, 14, -3, 32, -15, 4, -6, 30, 31, 32, 1, 2, 16, -5, -37, 26, 59, 25, -63, 23, -35, 52, -6, -9, 2, -25, -36, 1, 55, 26, 41, -56, 23, -24, 51, -24, -86, -3, 6, -9, 39, 15, 13, -2, -34, 22, 0, -94, -48, -98, -75, 31, -76, -9, 35, 7, 31, -17, -20, -38, 39, -15, -1, 25, -47, 12, 9, -4, -22, -1, 5, 30, -8, 19, 10, 4, 8, 16, -16, 23, 30, 30, -48, 12, 7, 43, 8, 10, 17, -35, -36, 21, 11, 3, -3, -23, 19, -4, 48, -11, -61, -29, 20, 11, 29, 7, 2, 13, -7, 23, -1, -74, -68, -70, -45, 20, -49, 7, 27, -25, 20, 25, -33, -44, 79, -30, 11, 16, -57, 20, 8, 15, 32, -11, 20, 29, 0, 6, 3, 10, 7, 8, -27, 13, 15, -4, -39, 13, -4, 42, -9, 40, 2, -39, -25, 4, 31, 8, 20, -30, -3, -13, 8, -21, -70, -18, -4, 3, 13, 1, 6, 4, -26, 46, 3, -73, -43, -73, -71, -17, -55, 33, 29, -13, 23, -1, -17, -39, 66, -28, 10, 14, -83, 33, 1, -2, 18, -10, 12, 29, 7, 8, 10, -8, 4, 26, -55, 16, 18, 28, -39, 10, -14, 35, -15, -1, 2, -37, -50, 19, 32, 18, 28, -44, 15, 13, 31, -5, -86, -59, 20, -4, 7, -4, 19, -2, -8, 3, 25, -70, -56, -96, -89, 7, -89, 8, 64, -6, 52, 14, -30, -43, 63, 5, 18, 0, -67, 44, -22, 29, 3, -24, -3, 48, -6, -15, 19, -24, 14, 18, -65, -3, 8, 39, -88, 30, -94, 56, -74, -8, 15, -34, -65, 1, 45, 3, 65, -71, -30, -2, 34, -38, -86, -49, 15, -11, -1, 18, 23, -9, -31, -25, 32, -104, -53, -111, -97, -5, -79, 45, 50, -14, 46, -17, -31, -31, 61, -9, 8, 0, -78, 16, -21, 28, 24, -35, -5, 45, -29, -11, 4, -22, 20, 3, -63, -1, 11, 29, -99, 17, -37, 55, -31, 15, 15, -36, -91, 3, 44, 17, 28, -66, -21, 0, 44, -39, -60, -61, 15, -14, -7, 10, 20, -1, -24, -17, 12, -110, -82, -98, -43, -5, -75, -20, 39, -32, 0, -35, -54, -32, 73, -4, 7, 11, -64, 27, 10, 13, -15, 30, 0, 32, 50, 37, 17, -24, 25, 6, -6, 6, 57, 51, -67, 25, -14, 45, 2, 1, 32, -35, -50, 32, 28, 27, 4, -62, 27, -39, 61, -20, -52, -18, 9, -5, 56, 1, 28, 18, -11, 6, 23, -67, -59, -65, -18, 25, -41, -10, 46, -33, -4, -14, -54, -44, 63, -9, 15, 11, -54, 7, 9, -6, -19, -34, -30, 5, -5, -3, 12, -15, 3, 14, -33, 6, 20, -20, -15, 25, 9, 34, -8, 11, 25, -20, -27, 11, 23, -20, 31, -30, -1, -10, 3, 26, -67, -64, 5, 22, 12, 17, 7, 22, -4, 23, 19, -73, -49, -69, -70, 1, -66, 19, 25, -29, -6, -10, -41, -22, 41, 6, 18, 10, -57, 22, 1, -1, -16, -46, -31, 27, -2, 2, 5, -44, 18, 28, -62, 2, 27, 24, -44, 11, -8, 21, -29, -17, 15, -44, -46, 6, 29, -18, 4, -52, -18, -22, 22, -28, -65, -58, 13, -1, 1, 13, 20, 8, -25, -9, 26, -60, -69, -92, -71, 7, -83, 9, 29, -23, -11, -13, -33, -41, 75, -1, 22, 2, -45, 16, 7, 2, 12, -28, 15, 40, 12, 17, 9, -40, 10, 11, -25, 7, 2, 42, -81, 25, -27, 40, -60, 0, -5, -15, -81, 22, 32, 25, 48, -89, -6, 14, 25, -70, -98, -87, 24, -6, 27, 7, 32, 6, -18, -42, 17, -98, -71, -64, -56, 4, -94, 10, 50, -24, 23, -13, -5, -8, 51, 6, 25, 12, -71, 41, -9, 34, 29, -31, 18, 19, -1, -17, 0, 8, 11, 6, -28, -7, 5, 17, -52, 7, -21, 56, -43, 31, 14, -22, -34, 6, 73, -3, 35, -53, -16, 9, 4, 10, -82, -84, 24, 3, -17, 9, 5, -2, -17, 0, 6, -92, -64, -69, -81, 1, -52, 21, 16, -36, 26, -16, -42, -27, 87, 5, 14, 20, -52, 41, 5, 11, 17, -12, 8, 26, 21, 0, 19, -5, 6, 14, -23, 25, 12, 31, -47, 14, -21, 27, -3, 23, 12, -18, -32, 19, 32, 14, 38, -37, -17, -4, 40, -27, -88, -32, 30, 10, 9, 10, 13, -3, -32, -6, 22, -71, -15, -75, -94, -10, -30, 18, 27, -20, 23, 14, -29, -21, 67, -15, 10, 29, -55, 22, -1, 24, -36, -47, -39, 34, 45, -10, 16, -34, 13, 7, -66, 8, 18, 20, -47, 28, -24, 56, -2, 9, 14, -24, -57, 2, 67, 21, 27, -44, -23, -60, 41, -19, -79, -78, 5, 6, 17, 2, 24, 2, -22, -9, 38, -67, -74, -106, -93, -3, -67, -5, 35, -14, 39, -22, -29, -24, 76, -1, 14, -1, -73, 17, -10, 24, -29, -49, -2, 49, 9, 21, 12, -13, 17, 28, -52, 2, 11, 14, -21, 17, 5, 57, -10, 17, 5, -46, -2, 11, 61, -18, 36, 1, -29, 2, 40, 22, -68, -65, 23, -1, -14, 25, 29, -13, -68, 15, 33, -62, -65, -55, -85, 11, -56, -4, 48, -29, 43, 13, -64, -61, 51, -2, 12, 2, -90, 22, -38, 39, -17, -35, -9, 6, 1, -19, 19, -39, 7, 20, -77, 2, 0, 15, -54, 24, -35, 49, -30, -19, 25, -58, -19, 3, 13, 10, 21, -24, -11, 33, 7, -19, -73, -84, -8, -26, -8, 28, 15, -11, -49, -21, 15, -68, -3, -62, -92, 5, -61, 3, 27, 6, 6, -41, -45, -40, -38, -10, 12, 
  30, -36, -29, 16, -48, -95, -16, -86, -80, -81, -27, 32, -30, 30, 12, -29, -35, -52, -102, 2, -20, 32, -28, 17, -29, 18, 41, -10, 35, -47, -114, -58, 37, -61, -51, -94, -15, -10, 33, -11, 19, -37, 22, 23, 14, 39, 4, 13, 11, -20, -1, -8, -13, -15, -5, -32, -50, -49, 26, 33, 51, -74, 9, 32, -2, 8, -8, 28, -47, 4, 7, -28, -62, -37, 7, 7, 1, 13, -14, -27, -24, -17, -79, 30, -22, 43, -68, 2, -7, 18, 12, 21, 20, -59, -42, -50, 27, -16, -17, -66, -13, -1, 15, -12, 24, -4, 20, 3, 17, 57, 23, -4, 17, 10, 2, 13, 4, 17, -25, -68, -30, -46, 32, 45, 66, -70, -1, 16, 12, 18, -32, 23, -17, -39, 4, -36, -18, 5, 23, 35, -16, 25, 2, 0, -3, -3, 6, 37, 6, 40, -14, -3, -20, 18, 14, 29, 21, -54, -21, -44, 25, -14, -35, -17, 8, 13, 21, -2, -5, -3, 35, 9, 28, 43, 14, 11, 43, 14, 12, 4, 14, 13, -22, -27, 24, -16, 9, 43, 54, -48, 29, 29, 10, -18, -17, 23, -33, -52, -35, -54, -8, -60, -15, 17, -43, 15, -7, -30, -38, -52, -50, 35, 12, 37, -23, 35, -36, 8, 20, 19, 26, -31, -54, -54, 32, -64, -63, -31, -26, -2, 24, -1, 13, -34, 25, 11, 8, 40, 15, 28, 4, 1, 3, -10, -26, 12, -35, -27, -29, -33, 6, 29, 41, -76, 23, 11, 19, 6, -27, 20, -28, -59, -31, -53, -42, -43, -33, 37, -24, 39, -4, -19, -25, -31, -38, 14, -2, 50, 0, 35, -37, 34, 40, 5, 44, -21, -38, -48, 37, -31, -40, -37, -27, 1, 12, 5, 9, -34, 27, 32, 21, 58, -1, 15, 5, -9, 14, 6, -20, 8, -20, 1, -18, -25, 16, 25, 36, -70, -15, 41, 10, -6, -30, 27, -54, -65, -5, -59, -20, -51, -7, 22, -16, 14, 8, -21, -24, -29, -55, 16, 5, 24, -19, 26, -53, 13, 29, 20, 36, -49, -50, -79, 38, -22, -41, -73, 3, 12, 25, 5, 24, -28, 16, 14, 13, 60, 3, 17, 8, 4, 12, 7, -9, 7, -27, -12, -49, -34, 8, 44, 62, -45, 0, 27, 6, 25, -28, 46, -40, -14, 5, -17, -50, -28, -5, 13, -4, 5, -4, -23, -20, -7, -33, 31, -19, 41, -36, 9, -35, -14, 42, 35, 19, -46, -17, -33, 30, -41, -38, -21, 9, 21, 24, -4, 21, -14, 2, 8, 6, 79, -20, -10, 13, 0, 18, 11, -12, 10, -18, -36, -7, -30, 30, 57, 69, -61, -18, 3, 4, -3, -6, 39, -44, -37, -17, -22, -13, -5, -1, 24, -30, 28, -6, -36, -13, -15, -29, 37, 14, 23, -12, 15, -37, 32, 33, 20, 26, -42, -21, -49, 10, -15, -32, -20, -9, 17, -1, 7, 4, -10, 27, 20, 13, 85, -19, 10, 3, -2, 6, 10, -16, 3, -18, 0, 20, -19, 1, 40, 58, -59, -5, 24, 24, 2, -22, 44, -39, -45, -36, -51, -41, -55, -35, 14, -44, 18, 5, -25, -51, -46, -40, 21, -7, 40, -30, 25, -48, 2, 35, 10, 21, -41, -67, -71, 15, -72, -52, -46, -27, 5, 29, -6, 10, -39, 9, 14, 14, 74, 15, 20, -9, 3, 14, -8, -34, 13, -19, -34, -49, -36, 14, 29, 71, -69, 5, 30, 12, 7, -29, 55, -31, -76, -31, -93, -39, -36, -18, 36, -14, 25, -4, 2, -9, -22, -46, 18, 14, 59, -7, 37, -13, 11, 32, 26, 30, -39, -51, -61, 36, -28, -10, -26, -14, -1, 12, 10, 14, -45, 27, 41, 22, 72, 5, 26, 5, -8, 10, 3, -10, 8, -11, -18, -26, -43, 25, 43, 59, -48, 9, 13, 4, -3, -23, 36, -25, -70, -20, -86, -17, -39, -20, 14, 9, 16, 5, -9, -26, -38, -60, 32, 9, 26, -28, 12, -34, 13, 38, 19, 27, -29, -37, -23, 21, -19, -4, -53, 23, 7, 3, -5, 21, -2, 22, 22, -3, 57, 23, 21, 3, 14, 5, -5, -26, 15, 27, -10, -36, -17, 17, 52, 65, -71, 18, 19, 7, 7, -12, 68, -50, -61, -1, -52, -64, -52, -8, 6, -9, -3, 8, -30, -8, -1, -43, 9, -20, 32, -8, 17, -14, -1, 40, 12, 4, -28, -43, -48, 33, -41, -24, -32, 5, 12, 23, 17, 35, -14, 8, 0, -1, 74, 2, -13, 16, 2, 13, -2, -12, -3, -23, -38, -23, -47, 32, 50, 66, -52, -24, -6, 9, 12, 10, 52, -24, -26, -21, -28, -14, -29, 11, 15, -35, 21, -3, -11, -15, -13, -28, 18, 10, 37, -14, 9, -29, 32, 33, 14, 26, -47, -42, -12, 17, -21, -53, -5, -24, 3, 16, -3, 1, -1, 13, 14, 17, 66, -22, 13, 18, -6, 19, 23, 2, 12, -11, 0, 16, -23, 17, 46, 62, -34, -16, 25, 17, 11, 13, 45, -35, -25, -3, -39, -46, -47, -28, 30, -6, 15, 15, -25, -10, -24, -24, 8, 1, 21, -19, 39, -30, 14, 39, 0, 37, -43, -39, -62, 18, -57, -29, -51, -19, -1, 20, 15, 11, -11, 16, 15, 30, 60, 22, 17, 12, 1, 3, 9, -22, 19, -17, -25, -35, -11, 31, 42, 58, -68, -13, 24, 24, 10, -19, 33, -25, -55, -22, -67, -38, -67, -1, 31, -24, 34, -3, -29, -14, -22, -59, 6, 10, 24, -8, 18, -21, 25, 13, 0, 36, -29, -52, -72, 25, -53, -50, -53, -21, 10, 8, 2, 15, -16, 14, 20, 20, 40, -11, 3, 0, -14, 9, -6, -2, -3, -23, -6, -38, -42, 22, 26, 46, -56, -42, 17, 32, 2, -34, 45, -38, -76, -11, -89, -27, -61, -4, 19, 9, 17, 7, -21, -19, -28, -51, 17, 3, 36, -33, 12, -40, 7, 26, 16, 28, -56, -49, -57, 27, -35, -25, -54, 0, 1, 22, 1, 32, -24, 22, 21, 25, 47, 10, -4, 11, 6, 3, -1, 7, 1, 7, -8, -22, -50, 23, 40, 55, -70, 65, 21, 6, 19, -30, 70, -49, -32, 0, -19, -62, -33, 5, -7, -8, 1, -3, -13, -23, -13, -41, 13, -37, 42, -10, 32, -41, -9, 36, 27, 17, -53, -14, -53, 26, -13, -27, -16, -12, 8, 21, 0, 12, -22, 12, -1, 21, 79, 3, -15, 9, 7, 2, 1, 8, -1, -13, -27, -8, -45, 33, 57, 82, -45, -12, -6, 4, 12, -5, 58, -51, -39, -7, -27, -47, -49, -4, 22, -25, 21, 3, -12, -15, -23, -44, 20, 4, 32, -43, 10, -42, 4, 37, 27, 33, -62, -47, -42, 29, -5, -34, -59, -18, 10, 14, -9, 4, 7, 3, 24, 0, 63, 7, 7, 11, 8, 10, -1, -12, 4, -31, -21, 7, -47, 18, 47, 74, -39, -34, 28, 41, -1, -11, 43, -74, -58, -31, -64, -51, -90, -27, 33, -34, 33, 13, -29, -41, -55, -55, 4, -3, 34, -38, 34, -37, 18, 39, 1, 39, -54, -70, -60, 17, -73, -57, -37, -29, -3, 35, -5, 14, -27, 18, 30, 24, 70, -8, 18, 14, 9, 8, 9, -49, -6, -18, -42, -40, -29, 14, 58, 59, -58, 20, 35, 16, -17, -8, 46, -48, -31, -42, -54, -43, -78, -23, 29, -33, 30, 1, -33, -42, -74, -79, 11, 8, 27, -8, 8, -46, 28, 23, -16, 34, -22, -71, -38, 12, -90, -35, -48, -17, -5, 8, 8, 10, -44, 16, 31, 18, 65, -8, 10, 0, -38, 6, -10, -33, -2, -25, 10, -54, -39, 14, 39, 54, 44, 26, 26, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 4,1280 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0066546392627060413, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[64] = { 718, 86, 166, -832, 1768, 20, 121, -216, 1371, 1503, 163, 734, 345, 1187, 892, -184, 409, 555, 683, -627, 1769, -2315, 1734, -399, 599, 935, -36, -1147, 141, 1907, 1327, 1779, -870, 648, 402, 675, -449, 255, 1468, 815, -366, 388, 862, 1566, -182, 62, 419, 507, -1035, 637, -858, -28, -275, -103, 345, 1379, 142, 558, -595, -74, -205, 212, -126, 346, };
const TfArray<1, int> tensor_dimension8 = { 1, { 64 } };
const TfArray<64, float> quant8_scale = { 64, { 4.089661524631083e-05, 3.793602081714198e-05, 3.9522878068964928e-05, 4.0251485188491642e-05, 3.40741898980923e-05, 4.9573427531868219e-05, 3.5697179555427283e-05, 3.8201178540475667e-05, 4.1237683035433292e-05, 3.8968744775047526e-05, 4.251072823535651e-05, 4.5219901949167252e-05, 3.6170640669297427e-05, 4.2588442738633603e-05, 3.583355646696873e-05, 4.6013705286895856e-05, 4.8212874389719218e-05, 4.7804573114262894e-05, 4.2074625525856391e-05, 4.2287945689167827e-05, 3.4739576221909374e-05, 3.469991497695446e-05, 5.163903915672563e-05, 3.8336434954544529e-05, 5.4328946134774014e-05, 4.3517142330529168e-05, 3.5958553780801594e-05, 3.9822130929678679e-05, 4.7738711145939305e-05, 4.289362914278172e-05, 3.3523454476380721e-05, 3.6512388760456815e-05, 4.075211109011434e-05, 4.9100090109277517e-05, 4.1520837839925662e-05, 5.1713457651203498e-05, 4.1156366933137178e-05, 3.7855454138480127e-05, 3.0819948733551428e-05, 3.1872146792011335e-05, 3.445483889663592e-05, 4.2198513256153092e-05, 4.9886883061844856e-05, 4.3686493881978095e-05, 3.7956957385176793e-05, 4.8321104259230196e-05, 4.0363414882449433e-05, 3.8517609937116504e-05, 3.8718499126844108e-05, 3.2288317015627399e-05, 4.6662709792144597e-05, 3.4231314202770591e-05, 3.8268728530965745e-05, 3.5298544389661402e-05, 5.125616371515207e-05, 4.711779547506012e-05, 3.6142868339084089e-05, 3.2302665204042569e-05, 3.469118382781744e-05, 5.7854271290125325e-05, 4.6588698751293123e-05, 0.00010089684656122699, 3.0507724659400992e-05, 5.2272138418629766e-05, } };
const TfArray<64, int> quant8_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[64*1*3*32] = { 
  /* [0][0][][] */ 63,32,25,89,0,3,32,10,-36,-77,-25,32,55,-28,-18,-31,-20,-9,-66,5,24,9,41,26,-39,31,4,9,70,72,-30,-28, 1,29,21,117,-36,27,24,-22,-27,-46,-24,2,127,2,-57,-44,-31,17,-65,-15,32,3,43,9,-1,-22,2,6,90,39,-11,-68, 40,-15,31,47,-29,-13,13,5,-19,16,42,-17,44,1,-58,-26,-36,46,-106,27,-15,10,60,-27,-25,18,-63,-3,82,111,-4,-59, 
  /* [1][0][][] */ 5,38,-27,16,54,-23,32,-46,51,-43,60,-8,-65,44,26,33,-51,28,42,-122,8,0,-22,-53,113,69,47,-28,-97,-29,79,79, 14,41,24,-37,-40,-43,-37,-29,16,-36,21,9,-25,22,72,37,-54,-22,127,-54,19,44,-103,-52,56,35,82,19,-65,-55,81,35, -44,15,-79,-10,-14,-62,-20,-16,4,-23,17,15,-83,-8,79,-5,-37,41,88,-42,58,-18,-95,-14,52,28,60,-29,-121,-50,99,55, 
  /* [2][0][][] */ -7,33,97,14,-77,39,-9,-7,21,-11,-59,47,113,-40,-30,29,7,-126,-57,73,-29,-11,25,63,-64,4,-47,26,-39,-21,-38,-26, -41,-22,35,-31,-85,78,1,-15,7,-9,-62,52,70,-40,27,43,-31,-57,-111,114,-18,10,28,19,-30,-50,-30,37,4,29,-30,44, 27,35,46,51,-49,55,-47,10,-40,33,-39,11,45,-45,10,-12,13,-78,-89,127,-20,-16,73,34,-55,6,-77,-26,38,-10,-1,67, 
  /* [3][0][][] */ 73,46,24,23,20,-8,87,-8,-15,-68,-18,-23,12,46,-42,-53,-75,105,-71,-14,48,-34,-3,-37,9,45,39,15,62,26,-39,-72, 95,8,43,77,-9,2,69,-15,-27,-35,9,-83,7,41,-22,-11,-127,85,-45,-69,17,-10,44,20,62,40,57,39,-26,35,-1,-72, 77,-20,68,37,-8,-43,54,5,-17,-95,-7,-44,4,-49,-40,2,-72,93,-87,-45,40,26,26,24,89,9,28,11,-28,72,3,-79, 
  /* [4][0][][] */ -26,-50,0,-45,42,-1,-110,21,2,-16,-35,82,37,-32,42,43,4,-45,23,108,-39,52,80,-17,-16,-18,-13,-32,-58,-27,19,21, -45,-74,55,-70,-27,13,-55,-15,54,87,18,45,45,-81,19,12,-18,-127,88,20,60,9,47,62,2,-5,-20,-58,-75,-79,20,94, 0,-44,40,-104,-22,-17,-42,13,-4,43,-19,21,0,16,26,53,29,-66,31,48,-2,4,62,42,-1,-33,11,-53,6,-36,6,79, 
  /* [5][0][][] */ -32,12,4,-62,-62,16,-59,-8,-10,-6,-19,-40,43,-69,2,11,-8,-18,3,37,-25,-11,39,-10,-4,10,-82,68,31,-23,-12,4, 19,63,33,-62,-6,64,-40,-45,18,-30,-127,15,76,-43,1,23,-17,-53,-9,43,-31,32,38,-27,30,22,-61,56,-60,-59,-40,26, 26,94,106,34,-57,35,-10,-44,-6,-51,-38,41,57,-22,16,62,15,3,18,30,11,9,111,23,15,-5,-58,31,-72,-41,-52,-61, 
  /* [6][0][][] */ 6,-33,-29,-100,-20,-42,-41,-39,88,-4,24,14,-41,-39,107,24,-67,0,112,-43,-8,-48,-100,-47,26,60,46,15,-74,-37,61,87, -37,31,-65,-119,-40,-48,-45,-7,10,43,23,20,-16,-7,81,13,-39,5,112,-2,-5,14,-38,-28,102,30,52,7,-122,-60,54,87, 11,-15,-88,-123,-37,-73,-11,-8,-15,0,51,35,-127,12,24,-18,23,-13,109,-9,12,44,-53,34,62,17,-14,-11,-74,-76,60,82, 
  /* [7][0][][] */ 6,20,77,-108,-51,89,-71,3,-12,-86,-93,-19,30,-39,1,35,-57,-33,48,57,-10,-26,126,-9,28,-3,-75,64,-2,-63,-12,-32, -25,39,76,-45,-50,64,4,-34,48,-9,-123,37,126,-67,57,42,-10,-53,-25,86,-62,41,51,-7,14,-3,-57,74,-85,-72,-36,-13, 47,107,95,11,-111,66,-86,-108,-57,-57,-66,21,78,-29,-39,-1,4,-46,33,24,28,26,127,31,55,14,-32,40,-91,-48,-76,-22, 
  /* [8][0][][] */ -28,-13,-44,-18,13,-8,-49,-24,20,56,-24,32,52,-14,97,30,18,-80,61,38,-11,-37,26,2,23,-2,2,-50,-41,-34,15,45, -11,-41,39,-8,-14,-37,-98,-11,8,60,9,29,7,-14,43,-10,-47,-127,53,52,41,-29,40,55,48,-34,33,-70,-14,-58,40,50, -5,-71,22,-73,-26,28,-115,43,7,-33,-35,31,15,-39,88,46,7,-82,87,24,17,-8,-26,4,50,-25,9,-60,-70,20,26,62, 
  /* [9][0][][] */ -15,-6,-21,-127,-10,-3,-62,-31,43,19,-30,-3,-36,-10,62,-55,-41,-12,97,-11,15,-7,-17,-4,54,42,-13,37,-16,-76,28,75, -30,53,-20,-122,-17,-13,-87,2,41,45,3,8,37,23,70,36,-51,-63,109,-29,-20,-4,30,-11,-2,-17,-32,34,-87,-121,40,62, -27,33,-31,-73,-10,2,-99,21,34,-12,7,43,-52,27,48,-37,5,-49,106,23,66,8,10,70,2,-79,-46,-34,-38,-61,-13,68, 
  /* [10][0][][] */ -1,4,-52,-43,-7,-48,-16,-7,45,-22,18,38,-54,12,46,9,-61,-21,92,-5,22,-7,-104,-105,80,40,82,-8,-79,-67,92,61, -9,-39,-31,-74,-13,-68,-57,-3,16,-14,22,-5,-12,39,63,-12,4,-42,127,-34,8,3,-86,-47,31,7,58,-35,-64,-47,35,52, -35,8,-28,-52,-9,-73,-74,8,16,7,21,-1,-127,2,65,-8,16,15,85,-5,40,30,-63,-33,66,-23,68,-24,-79,-17,61,34, 
  /* [11][0][][] */ -112,93,-68,59,-49,-1,21,56,-25,28,21,-24,-30,38,-14,-31,-10,84,3,26,-67,-42,-41,37,-75,-53,28,19,56,26,35,9, -118,14,-54,73,-127,-28,9,22,-17,68,-18,0,-2,37,-19,2,22,82,-25,42,-67,-12,-71,3,-82,-53,11,-1,22,73,29,2, -108,60,-86,83,-93,-18,-7,34,-18,53,-20,18,-3,41,-6,10,32,94,1,-20,-74,-48,-37,34,-24,-30,57,-11,35,86,37,-21, 
  /* [12][0][][] */ -69,10,39,-110,8,66,-46,-4,48,-4,-26,40,91,-74,-65,-2,34,-127,-16,78,-23,-9,76,-15,-103,-22,-127,61,37,-117,-65,61, -16,-31,61,-5,-25,67,27,-1,-4,-71,3,18,104,-76,-20,17,11,-75,-84,77,60,-9,71,-24,-95,21,-101,105,72,-115,-68,5, -11,51,49,4,32,54,-1,-60,-15,-29,-11,53,92,-89,-44,-10,-11,-96,-34,88,43,-44,49,-65,-44,6,-110,40,97,-85,-37,1, 
  /* [13][0][][] */ -67,3,-40,22,-44,-31,-14,50,-46,8,-7,25,-16,-12,-7,34,-44,97,-7,-30,-52,-33,-47,3,-78,-18,44,34,54,30,14,-28, -92,58,-68,77,-91,-9,9,58,-51,16,-4,-58,-22,68,-16,-31,35,82,-35,-27,-76,-50,-30,22,-71,-3,17,41,61,127,24,-31, -67,35,-23,109,-65,6,-29,-8,-30,56,31,-12,-11,46,-43,11,49,73,-10,-3,-52,4,-36,35,-38,-55,31,-36,30,64,105,-40, 
  /* [14][0][][] */ 22,35,54,44,-13,61,28,-30,13,-20,-60,19,127,-32,-53,48,-14,-50,-80,93,37,-10,42,27,-22,-75,-47,70,65,-3,-35,-35, 0,-6,92,97,-15,9,-25,16,-37,-32,-32,47,114,3,-19,10,-39,-62,-22,105,31,-16,97,33,-59,-10,-65,42,99,53,-14,-40, -27,-18,32,19,-7,-24,-11,6,-16,23,1,-24,92,-27,5,-52,10,-38,-61,39,30,29,41,-8,-93,16,-84,1,70,45,-3,-60, 
  /* [15][0][][] */ -22,46,-33,-127,-40,-34,-18,6,18,-40,18,8,-20,-20,-13,18,49,-114,68,6,50,18,28,-64,-20,9,-43,20,-4,-93,-8,78, -5,75,-17,-47,16,4,10,21,21,-55,-10,-34,15,-7,-12,-27,18,-31,92,6,58,19,75,-29,25,35,-71,3,20,-87,2,57, -40,74,-26,-96,-27,5,-71,15,49,-4,3,5,32,-8,5,31,25,-70,69,21,26,2,79,-26,26,-17,-61,-3,6,-101,-12,56, 
  /* [16][0][][] */ 13,12,-21,-52,26,-28,-9,-24,18,-12,27,24,-29,21,67,5,-26,-31,83,-46,-9,11,-68,-61,44,7,63,-46,-56,-81,58,44, -5,-32,-43,-97,-27,1,-44,32,34,-5,-17,23,9,30,76,-23,10,-31,115,-32,-15,-12,-98,-20,57,12,26,11,-76,-43,25,58, -12,-3,-73,-110,-1,-50,-46,17,-22,29,26,-11,-65,30,65,19,-33,-10,127,-5,33,-1,-32,-50,57,13,20,-56,-78,-2,67,25, 
  /* [17][0][][] */ 35,-27,-32,-52,15,-62,-15,-33,53,4,7,30,-75,22,60,10,-39,-37,111,-27,11,35,-85,-38,27,2,46,-9,-78,-56,59,60, -6,-23,-48,-127,-6,-33,-82,28,19,18,-18,11,-3,-11,47,-26,-24,-49,87,-4,4,-23,-67,-10,35,-18,15,-27,-70,-7,41,60, 2,15,-77,-71,-23,-52,-68,40,10,34,29,20,-103,3,-12,16,-30,3,62,12,48,22,-52,-4,34,10,54,-36,-50,-3,18,17, 
  /* [18][0][][] */ -9,-6,1,-127,-7,3,-43,-10,67,20,-45,13,11,4,102,-4,-51,-74,66,47,49,-24,-19,-85,72,-8,-26,-23,-55,-55,30,70, -45,0,7,-62,-41,-9,-86,34,4,37,3,-36,67,-37,66,44,29,-102,96,-9,24,25,-12,42,48,24,-27,25,-62,-58,23,70, -53,29,-39,-42,-6,13,-90,31,14,49,-8,28,-71,-3,78,-31,-34,-63,110,85,7,36,-14,52,64,-16,-22,-59,7,14,31,30, 
  /* [19][0][][] */ -7,20,-24,-27,-23,-26,-8,-11,34,-29,37,-37,7,-10,-53,-43,-24,-48,-74,-34,-42,22,15,25,-18,16,-48,51,126,-22,-50,-1, 38,35,8,24,-37,33,-20,19,-3,-50,46,-22,59,14,-9,14,-49,-4,-72,-52,41,22,99,8,0,43,-33,40,81,-19,-74,33, 1,48,65,-12,3,-27,5,-6,58,-29,9,-29,0,18,-96,-26,-47,-36,-120,-31,40,5,97,-2,8,4,-60,52,127,25,-39,-31, 
  /* [20][0][][] */ -127,-78,-39,69,12,54,-87,63,17,110,-9,13,-62,20,80,15,56,-82,1,76,-25,-47,-46,43,-24,8,96,-2,-72,63,56,41, -8,-91,-47,28,-102,-3,-74,53,-33,46,-15,-8,-36,29,76,-55,-57,-56,13,54,-3,-58,-49,37,30,-55,36,-56,-10,43,63,25, 40,-75,-5,-55,-16,48,-69,33,-21,-1,-41,36,-44,16,48,-50,-8,-32,34,5,-19,20,-36,-43,-5,-7,3,-65,-65,34,76,46, 
  /* [21][0][][] */ 72,18,35,46,50,-30,53,-26,17,-33,52,-22,-24,33,-23,-65,-74,114,-73,-60,-43,-9,65,-80,6,13,40,26,92,68,-68,-68, 79,25,13,74,-6,-48,41,18,-12,-34,23,-41,-21,33,-33,-64,-105,85,-93,-43,8,-3,78,-21,21,30,80,1,16,73,-14,-38, 99,3,53,82,-73,-14,30,31,20,-87,34,-89,14,18,4,27,-127,64,-115,-77,47,57,14,7,45,-11,10,27,76,68,-29,-110, 
  /* [22][0][][] */ -35,-86,16,-5,2,40,-54,12,-45,59,28,22,-8,10,59,24,22,-127,-37,23,-33,-29,-16,37,-27,24,18,-104,-26,14,55,-11, -48,-12,-2,12,-52,16,-92,6,-15,29,-35,26,8,-6,50,-14,22,-87,-6,75,-35,-13,10,28,-6,-65,-9,-84,-47,59,-5,-44, -12,-75,25,18,44,17,-33,-22,-15,58,29,42,-28,-5,18,32,-1,-111,-2,62,-60,-23,5,18,-26,-31,7,-74,9,6,-62,10, 
  /* [23][0][][] */ 62,30,41,67,-15,-20,79,-54,-15,-26,0,-55,-19,-41,-54,-15,-82,29,-63,-52,61,46,77,-60,27,55,-37,-22,94,5,88,-44, 86,-25,-12,78,-25,35,34,21,-8,-15,5,-24,-65,-21,-51,-54,-127,20,-35,-33,-28,31,42,26,40,3,3,-1,9,36,-6,-73, 77,33,-12,-4,-1,28,5,18,8,-59,44,-102,-14,31,-68,-25,-90,26,-46,-48,-9,53,49,1,-8,-33,15,-5,78,97,-67,-23, 
  /* [24][0][][] */ -42,-16,-7,-73,-17,26,-37,-48,25,12,-38,19,29,-12,-43,-18,17,-79,-33,55,-1,12,63,-30,-41,-3,-85,49,13,-35,-10,48, -47,1,5,-18,-12,5,10,-24,-6,-11,-27,14,76,-44,-32,-18,10,-92,-22,63,11,15,32,-6,-55,-17,-127,57,44,-74,-27,23, -35,25,43,11,9,43,20,-23,10,-20,-31,44,66,-27,17,28,9,-34,-60,75,35,24,16,24,-29,3,-92,14,35,-45,-13,17, 
  /* [25][0][][] */ -127,43,-43,31,-38,8,0,67,-39,35,24,13,6,31,17,30,24,55,32,-4,-51,-44,-54,17,-47,-19,32,-4,-14,60,33,20, -123,38,-77,43,-91,-32,-69,35,-33,57,-19,-25,-32,62,-11,-18,-31,23,60,-16,-36,-16,-29,55,-14,-43,79,-8,12,77,78,28, -25,6,-16,53,24,5,-46,4,-27,40,5,27,-47,-1,1,-22,-3,33,66,5,19,44,-19,-13,0,-25,98,-27,-21,95,61,-5, 
  /* [26][0][][] */ 10,28,-78,5,21,-14,53,-24,-88,-87,27,3,2,-31,4,42,-54,57,-42,-5,75,41,-91,-25,44,57,29,34,-21,41,-7,-66, 97,5,-24,59,-18,-10,59,-66,7,-124,41,-14,20,19,-36,0,-71,127,-22,-80,29,16,-20,5,81,17,8,29,13,74,-2,-54, 78,1,73,29,-2,-11,37,-55,-69,-73,24,0,29,-35,27,-42,-36,109,-61,-69,8,-5,45,-3,35,-18,57,34,36,100,41,-48, 
  /* [27][0][][] */ 25,30,4,-65,-11,-33,46,-8,44,-86,13,-41,5,-1,-40,-16,-62,-28,-85,2,-25,-3,91,31,-37,-17,-39,77,88,-3,-26,-31, 15,29,4,-14,-10,-21,45,33,61,-22,48,-35,66,-10,-15,4,-35,28,-107,16,47,-11,58,-30,-29,43,-28,85,93,-11,-29,29, 8,59,26,3,5,-9,0,9,55,-22,-22,18,59,26,-74,-47,-76,34,-95,-1,3,10,72,26,-40,-17,-75,42,127,-18,-13,0, 
  /* [28][0][][] */ 17,40,-46,41,21,-66,8,30,-5,-3,33,-42,-23,1,-79,-31,-44,85,-37,-19,-30,-6,31,-34,-32,-26,8,22,38,61,17,-44, -32,-2,1,58,-67,3,24,-4,-8,13,22,-61,24,4,-82,-47,-54,127,-47,-15,-32,-25,-10,41,-2,-2,41,16,30,69,43,-56, -15,0,-20,100,-56,-5,29,-3,-54,-10,-12,-34,8,25,-65,-34,-24,111,-49,30,52,10,-16,11,-35,18,24,7,15,80,48,-30, 
  /* [29][0][][] */ -27,-14,20,-40,44,6,-55,-21,-16,56,-55,33,57,-22,19,32,85,-126,8,72,5,11,43,40,-13,2,-7,-35,-39,14,-38,6, -42,-53,6,-17,26,67,-69,19,-6,58,-37,53,27,-48,21,-1,3,-91,-14,47,16,21,37,43,-39,-35,-12,-66,30,-6,-8,19, -84,-99,57,-27,10,58,-76,-1,2,22,-2,53,18,-30,34,68,81,-92,-42,60,-8,-35,26,60,-45,-8,-35,-127,-13,3,-6,63, 
  /* [30][0][][] */ 8,4,44,-127,-52,-15,-63,7,57,51,8,14,37,2,22,-24,3,-63,122,0,0,40,53,-123,60,16,-61,42,-61,-114,3,120, -33,53,41,-107,-26,42,-109,-30,14,-13,16,-6,65,-52,33,-8,11,-100,57,26,29,54,55,75,45,-23,-12,-4,-58,-106,-26,121, -89,-20,-12,-70,-87,-19,-83,48,47,39,-45,53,-11,-21,89,-4,-13,-101,78,100,-2,48,-69,84,84,46,12,6,-16,-34,8,40, 
  /* [31][0][][] */ -5,-9,5,-118,-23,40,-77,20,-3,65,-23,37,17,-68,25,-6,12,-106,58,89,-17,5,93,-24,-60,1,-15,-16,-44,-67,-31,23, -61,39,52,-107,-10,36,-87,14,-8,-39,10,51,22,2,61,40,23,-127,0,79,-15,38,49,38,2,-13,-53,10,-16,-36,12,108, -81,-53,59,-73,-7,50,-34,21,25,-7,-56,26,59,-18,66,8,21,-100,22,71,44,9,61,47,-27,54,-67,-47,-31,9,-5,71, 
  /* [32][0][][] */ 75,21,-33,41,-12,-2,50,6,41,-16,53,-35,-14,25,-52,-45,-38,12,-107,-45,-19,9,2,-38,-15,25,-34,49,106,-5,-30,-60, 21,24,19,8,-60,33,-14,-18,27,-31,54,-54,30,-19,-51,9,-44,10,-55,-23,19,-10,93,-32,30,16,20,32,93,-13,-44,-20, 42,42,19,38,-48,-26,8,44,49,-53,7,-32,15,-3,-74,-22,-83,-24,-127,-71,27,-13,84,-30,-12,-4,1,46,107,77,-55,-61, 
  /* [33][0][][] */ -10,1,-32,-114,8,4,-4,11,55,16,-12,-31,-7,-2,32,5,1,-40,90,-23,23,19,-13,-69,60,38,-11,18,-56,-80,2,64, -37,-1,-29,-103,-52,-1,-65,-24,37,4,17,-6,5,30,47,7,-43,-55,118,5,30,-15,-18,-12,46,28,1,-1,-71,-90,12,84, -21,23,-23,-127,-6,-7,-68,13,50,4,-3,14,-75,35,-1,12,-4,-16,80,32,28,42,-39,27,20,5,8,-19,-56,-84,34,49, 
  /* [34][0][][] */ -38,18,13,-95,-4,84,-45,30,16,-26,6,9,47,-74,-1,48,33,-123,-22,67,-29,-11,102,-5,-58,17,-44,19,21,-127,-57,71, -26,29,17,-22,15,13,4,-18,-6,-29,-8,17,96,5,-30,18,-12,-74,-26,108,19,17,46,41,-66,19,-98,85,-6,-66,-45,29, -7,20,-4,-64,10,11,-52,12,41,-4,-38,14,65,-43,-62,-13,33,-83,-27,110,0,-36,71,23,-101,-16,-78,4,-1,-74,-34,64, 
  /* [35][0][][] */ -5,-17,-34,-96,0,-13,-21,-31,-2,34,27,34,-10,8,71,2,21,-49,84,0,20,10,3,-7,73,6,7,-22,-42,-61,35,38, -41,7,-10,-103,1,20,-59,23,-23,17,7,-11,0,0,52,-2,-14,-127,53,17,22,36,-40,37,56,-10,12,-41,-55,-37,34,73, -2,12,-18,-17,-54,-60,-96,-1,-5,44,-12,-20,-30,13,45,-34,15,-57,71,69,49,12,-40,27,10,6,28,-22,-46,18,34,23, 
  /* [36][0][][] */ -26,11,-5,-48,29,33,-4,14,26,-54,-13,25,43,-43,-49,-10,-48,-86,-5,53,13,11,110,-54,-59,-33,-66,73,58,-67,-42,-22, -21,-28,0,-2,13,65,38,-45,40,-58,-60,1,72,-22,-27,-32,-46,-59,-93,89,57,12,79,-24,-56,-7,-74,111,49,-61,-57,23, -28,32,39,0,-28,10,6,-45,36,11,-17,57,127,-17,-7,8,-25,-8,-9,83,2,9,60,14,-69,-11,-96,59,60,5,-31,19, 
  /* [37][0][][] */ 65,123,12,-16,-20,-45,45,-47,63,-43,45,-9,-29,-28,-27,34,-43,-41,40,-73,80,98,15,-59,96,46,34,51,-34,16,13,-4, 55,76,3,-12,8,10,23,-3,101,-31,32,-38,5,10,-18,53,-57,-37,85,-59,81,9,-5,-38,55,51,0,-1,21,-35,47,24, 12,84,-16,20,18,-48,66,8,14,-66,85,-30,-34,-48,54,13,-61,-36,37,-109,127,34,16,-12,87,41,43,40,23,31,10,-13, 
  /* [38][0][][] */ 51,31,55,29,-30,-18,122,-70,-74,-42,47,58,44,-35,11,-3,5,-66,-39,-87,-75,-10,21,-74,111,55,101,-15,96,107,-18,-127, 16,-26,59,32,5,51,67,-93,-24,-57,-17,2,-24,-75,2,23,-98,-83,-2,-105,-53,39,-30,22,82,10,71,-40,59,68,32,-118, 67,29,-37,40,-38,-3,31,-64,-59,-28,70,18,-37,-46,21,-44,-10,12,17,-45,-25,78,29,-35,28,74,3,57,36,70,-21,-61, 
  /* [39][0][][] */ 26,55,88,67,-65,127,17,2,7,-15,-39,-31,97,-57,-16,-25,6,-38,-120,39,15,42,110,3,-68,12,-88,55,99,-15,-16,-28, 19,11,47,-2,-44,43,-52,40,30,-4,-27,1,108,-57,-57,-26,-2,-79,-61,20,-10,32,100,-16,-38,-63,-86,44,85,53,-68,-59, -40,13,-19,72,14,42,-27,33,-18,-2,-13,37,47,-45,0,-38,36,-72,-81,109,59,-49,39,-9,-40,-40,-70,-1,55,79,-80,19, 
  /* [40][0][][] */ 65,61,-8,8,-9,50,75,32,10,-78,-26,21,87,17,-38,-26,-89,64,-72,9,-39,33,73,-26,-55,-1,-37,45,80,34,-90,-37, 9,0,50,14,-69,37,29,-29,10,-1,26,-46,127,-27,-56,-26,-71,82,-81,21,51,3,108,-58,-43,-43,-9,62,52,67,-70,6, 3,-17,42,49,-57,-6,48,16,21,-58,-21,-36,84,-26,-13,-45,-45,90,-32,33,4,9,73,16,-55,5,-101,25,101,95,-21,0, 
  /* [41][0][][] */ 20,13,-46,-81,11,-40,-28,-11,48,-13,39,29,-79,5,69,-36,-34,-35,101,-48,-20,-12,-79,-52,64,23,48,20,-99,-28,63,52, -22,-36,-38,-101,-45,-33,-43,24,-7,-15,22,-6,-72,33,66,-13,-17,-29,127,4,32,32,-113,18,64,-11,66,-43,-33,-49,56,49, -37,-22,-57,-99,16,-12,-26,17,30,3,-8,43,-91,4,53,-21,-10,-16,92,-54,24,-1,-60,0,58,-35,52,-8,-101,1,25,35, 
  /* [42][0][][] */ -127,62,-46,9,-53,-11,-30,65,3,82,-4,-22,-40,48,20,-21,-8,87,-15,34,-63,-12,-6,51,-13,-11,14,-7,53,28,23,3, -121,35,-53,61,-69,-8,-32,21,-36,62,-16,-10,-37,51,24,29,-12,98,40,-13,-32,6,-61,12,-32,-55,25,-7,-6,70,29,25, -70,45,-39,37,-49,17,15,29,-8,54,18,25,-32,41,1,4,37,101,44,-13,-35,-36,-59,0,-18,-18,30,-36,-25,81,52,7, 
  /* [43][0][][] */ -104,20,-31,17,-82,-49,-18,42,-34,9,-11,8,49,-9,-41,-49,-21,70,-31,32,-71,-53,-26,42,-86,-61,57,45,71,106,7,15, -78,4,-33,84,-127,33,2,57,-39,36,-5,-13,22,46,-51,-5,-32,-14,-68,37,-68,-39,4,39,-112,-15,0,3,51,71,31,-52, -78,51,-60,76,-102,-1,-57,-2,-19,68,8,-23,25,13,-61,-10,27,56,-36,21,-53,-20,-24,39,-26,9,43,-18,15,85,55,-41, 
  /* [44][0][][] */ -10,27,-35,6,58,-76,-11,-10,-34,-1,22,22,-67,7,42,8,22,94,11,-21,13,36,-56,-28,82,7,6,-23,-22,54,53,23, -57,-14,-22,61,26,-7,-9,-12,-7,-23,32,16,-41,71,-8,12,-89,76,46,-67,-7,-6,-94,2,-16,47,67,-20,-74,41,62,-36, 8,2,-46,107,4,-43,-11,25,13,-31,-1,-19,-46,38,13,-35,28,127,41,-47,43,-7,-100,-21,38,14,96,-7,-16,58,84,-21, 
  /* [45][0][][] */ 44,-29,-17,7,95,-29,41,-45,-63,-53,22,18,-53,-23,7,-18,-51,98,-13,-59,59,19,-53,13,45,61,-3,-18,-119,44,78,-56, 19,-19,-16,49,36,-46,50,-56,-58,-63,15,-11,0,33,29,-29,-58,127,-4,-58,73,-10,-15,13,21,52,18,-4,-17,67,30,-38, 38,-12,-1,49,29,-24,51,1,-25,-76,-24,16,4,19,19,-24,-84,70,-31,-21,17,-14,-21,23,93,37,28,-19,-84,5,-2,-93, 
  /* [46][0][][] */ 46,12,52,15,3,41,27,-4,16,-7,-20,-27,61,-46,-47,-2,-5,-53,-127,-23,-30,-30,82,-56,-4,24,-89,25,53,-77,-39,-33, 41,7,-13,0,-51,-9,14,-51,-12,-28,39,35,72,-43,-54,22,-32,-18,-66,39,33,34,75,-103,-74,25,-105,56,80,-35,-23,4, 50,-20,24,34,17,16,70,8,-5,26,-9,10,84,-42,-16,-6,14,9,-107,7,36,-13,82,-58,-40,-4,-46,22,98,-7,-5,-28, 
  /* [47][0][][] */ -68,17,-14,63,-18,3,-27,34,2,57,15,-13,-10,56,-29,-48,44,-62,-31,83,-48,-28,50,88,-45,-72,8,-10,82,96,-65,-56, -77,-22,8,72,-14,58,-47,18,-74,28,-27,-9,48,17,-94,-56,5,-68,-79,40,-87,-63,-45,21,-127,-50,-18,5,50,54,7,-41, -108,-40,-49,123,-125,42,-61,49,-80,87,-40,-30,-60,-8,-42,0,3,18,-8,40,18,-2,20,46,-65,-26,-18,-47,48,72,79,-30, 
  /* [48][0][][] */ 52,108,29,-50,-32,-32,22,-30,94,-102,73,-62,7,14,-23,-39,-27,-28,-20,-32,77,74,43,-68,27,60,7,73,103,16,11,23, -31,103,44,-70,-66,-29,-21,9,63,-34,36,-39,-12,40,-44,-7,-64,-45,-2,-81,105,27,40,-36,27,-35,65,10,122,26,16,8, -74,84,-51,-28,-46,-103,9,-15,70,-31,50,-41,42,2,-58,-27,-26,-12,28,-49,81,57,45,-69,19,-24,-25,9,127,-53,-24,67, 
  /* [49][0][][] */ 3,72,15,-38,-87,13,-15,7,105,-97,-13,-5,10,-38,-50,-40,23,-100,-4,19,36,-47,115,8,-89,28,-30,52,85,-54,-35,92, -35,118,33,-21,-7,31,37,30,99,-37,62,15,79,-30,-26,-52,34,-67,13,-23,68,49,90,10,-81,28,-93,89,33,-103,-78,9, -36,127,-7,3,-93,-34,-15,21,60,-29,-6,7,88,-18,-21,-23,31,-120,27,2,-1,38,60,-37,29,1,-71,-24,57,-101,-16,82, 
  /* [50][0][][] */ 17,122,47,23,-54,-52,9,25,69,-86,55,-50,26,-13,7,13,-25,-27,3,-65,94,57,90,-31,33,29,58,66,48,-25,33,58, -3,127,-1,-16,-66,-82,5,-18,88,-78,62,-61,2,37,-4,34,13,-37,27,-91,74,48,23,-3,-18,-28,24,21,61,-21,35,54, -33,96,12,21,-44,-58,25,22,34,-25,63,-19,-4,-21,-34,6,-23,-34,35,-57,102,56,43,-11,-21,33,7,31,28,-51,53,35, 
  /* [51][0][][] */ -31,102,17,-74,-11,-8,15,4,71,-5,78,7,-17,-19,-4,39,-82,-33,22,-84,32,65,84,-74,44,76,57,-9,-55,-27,44,87, -67,127,-38,-114,-81,-85,-18,8,73,-70,53,-14,-44,4,62,1,-54,-16,31,-37,32,74,-46,-8,87,17,77,65,28,-44,18,93, -15,43,-58,-44,-54,-80,23,-2,53,-49,74,-24,-53,-20,49,18,-25,-71,81,-46,44,51,38,-39,31,57,17,22,-34,-24,39,45, 
  /* [52][0][][] */ -19,7,-38,-42,-21,-35,-11,-9,16,28,28,16,-82,-5,69,24,-43,17,62,-18,-12,3,-63,-55,39,1,87,-81,-79,-17,79,44, 2,-33,-63,-74,0,-2,-30,18,41,7,38,18,-71,34,84,16,-17,-38,74,-18,43,1,-99,-11,35,8,14,10,-102,-66,66,25, -13,-14,-72,-80,-44,-77,-49,33,24,-3,-9,18,-127,50,97,12,-30,42,125,-31,6,-33,-67,-57,38,-13,70,-28,-84,0,85,57, 
  /* [53][0][][] */ 17,103,-35,-20,-64,-25,-29,-38,77,-34,59,-19,39,-19,-8,-36,-1,-26,-8,-29,93,46,52,-66,28,27,-32,52,45,-1,14,-11, 14,100,-49,-35,-104,-8,14,-39,50,-16,68,-82,49,17,-96,-25,-9,-52,34,-55,72,73,90,0,-8,-16,-56,34,95,-39,10,30, 57,43,-51,11,-22,6,38,-32,61,-38,43,-21,-1,9,-54,13,-19,-23,34,-58,127,-27,117,-73,36,27,-22,35,30,1,-51,-14, 
  /* [54][0][][] */ -4,30,5,-11,4,22,-26,-8,-6,-15,-35,44,52,-41,-42,34,32,-43,-67,68,10,-24,66,9,-23,-6,-55,51,17,-77,-29,3, -46,17,16,-24,16,17,-15,-11,8,-45,-15,-7,40,-31,-41,-25,4,2,-35,85,45,-19,44,-6,-17,6,-60,48,40,-6,-18,2, -18,7,18,-11,-5,34,20,-8,5,-21,-29,19,76,-66,-25,2,1,-34,-40,52,20,-23,75,16,-73,19,-127,33,59,-56,-29,43, 
  /* [55][0][][] */ -92,-83,17,39,-8,16,-86,35,27,64,12,53,-17,38,74,7,3,-127,-4,64,-52,-33,-70,4,17,22,57,-121,-35,46,16,2, 14,-86,-18,8,-34,18,-78,8,-19,40,-14,-1,6,25,54,-33,-5,-62,17,18,-9,-38,-7,32,24,-32,11,-32,-49,7,38,32, 12,-75,-21,-9,-13,56,-59,-6,16,31,8,33,-40,-26,55,-25,-14,-110,11,32,-7,2,5,0,24,28,-2,-103,-23,27,-25,18, 
  /* [56][0][][] */ 1,75,48,-26,2,-15,5,-30,75,36,13,-11,-3,-15,-11,30,-1,-123,60,-43,68,-24,45,-51,7,66,-32,62,2,-127,-8,15, -83,92,-9,-78,-24,34,-48,21,3,-5,-5,27,-3,60,89,31,-18,-108,53,-9,90,18,8,48,71,32,-91,-6,43,-120,-27,68, -67,83,-90,-104,-96,-56,-111,32,28,-7,-40,60,-8,5,66,49,22,-108,78,12,79,40,-20,86,13,7,-72,-44,-20,-64,6,73, 
  /* [57][0][][] */ -41,55,-11,-121,11,70,-123,20,-18,-41,-33,-27,69,-13,53,34,19,-107,14,52,-27,23,41,-56,-37,22,-84,-26,6,-38,-15,99, -58,21,-17,-23,-32,54,-123,-33,37,49,-34,25,127,-55,55,-12,-5,-98,85,86,-13,-55,29,71,35,-5,-42,-27,-21,-89,24,38, -58,-1,54,5,-30,92,-60,40,-8,7,-27,57,73,0,89,48,6,-109,97,77,-2,10,56,63,28,38,-42,-62,6,-10,42,100, 
  /* [58][0][][] */ 62,21,-2,48,0,48,99,8,-19,-39,10,-31,58,-17,-49,-29,-79,37,-108,-77,7,-31,27,-19,-30,71,-60,47,85,-16,10,-79, 75,67,34,3,2,-23,17,-44,-9,-58,33,-32,88,-28,-50,15,-103,46,-127,-58,30,20,94,19,42,43,-5,38,80,55,-31,-72, 32,44,29,97,3,54,67,-30,8,-99,12,-58,36,22,-83,-50,-48,40,-91,-30,44,-18,53,17,2,-33,15,39,71,92,-43,-29, 
  /* [59][0][][] */ 44,-8,-17,11,66,-20,52,-58,-62,-59,-14,-8,5,-19,15,-8,-13,72,-2,-24,68,-2,-12,-5,49,57,3,20,-93,44,11,1, 21,-20,-29,-8,46,-6,81,-37,-74,-26,-38,-17,14,1,19,9,-18,71,8,6,41,13,-56,-16,15,4,49,3,-55,45,30,-10, 8,-6,-31,11,39,-19,79,-26,-76,-64,-19,7,18,0,-8,6,-46,79,-8,13,70,11,-57,-25,18,21,30,19,-127,48,21,-56, 
  /* [60][0][][] */ 63,10,-32,-6,114,-21,80,-43,-90,-62,-30,28,-42,2,7,-42,-44,82,-15,-24,99,-20,-49,4,24,71,44,10,-127,40,57,-31, -8,-16,-17,20,79,-5,74,-54,-73,-96,-13,-32,-21,28,1,-34,-96,98,-20,-26,75,-1,-43,-29,57,25,35,32,-89,38,36,-17, 31,7,5,20,38,-6,85,-34,-110,-86,-36,-25,2,-7,-4,-13,-60,110,-34,-10,64,-8,-95,-9,36,36,48,37,-99,62,51,-52, 
  /* [61][0][][] */ -4,21,-7,-12,1,36,-51,-28,17,-25,-112,-5,23,-34,-24,8,-10,17,27,-9,-47,-4,4,-8,-5,23,-3,49,-49,5,14,-24, 26,1,48,-8,-33,46,-55,-11,27,-53,-103,0,-21,-28,-8,24,-19,19,21,12,-45,5,36,-19,-9,-23,15,20,-17,7,15,-93, 7,7,60,-29,-48,27,-95,-77,8,-56,-127,-22,-43,-80,-33,23,-31,26,0,-19,-4,-15,4,-11,-6,-28,-36,9,-32,-27,3,-44, 
  /* [62][0][][] */ -80,3,-30,15,104,-110,-35,-13,48,19,-124,7,126,22,-91,7,-37,-17,-35,-55,52,-20,-83,11,-32,-9,-53,10,92,-73,-67,74, -3,48,52,-33,12,-69,-21,-50,-50,20,-29,-30,45,-19,39,43,-89,-63,-24,-5,9,75,-59,3,-48,-91,-69,-64,83,-30,-4,-5, -20,-114,57,-116,-127,42,-13,25,8,17,33,51,-2,13,31,-75,11,81,-63,45,-22,-50,-24,-6,-82,-34,37,27,23,0,98,65, 
  /* [63][0][][] */ -43,61,-37,59,-39,-6,-9,42,-23,24,-17,-17,-8,37,-17,-36,-34,127,-57,17,-13,-49,-13,43,-31,-23,34,-2,48,72,-14,-16, -55,43,-8,49,-42,3,-7,34,-43,34,-10,-62,-12,14,-78,-45,-42,91,-51,2,-34,-26,-72,34,-40,-20,2,22,25,101,-24,-9, -72,32,-62,61,-63,-25,-11,9,-18,32,25,-7,3,35,-60,-26,15,99,-25,2,3,12,6,32,-36,-30,14,-11,61,89,56,-47, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant9_scale = { 64, { 0.00405454495921731, 0.0037610279396176338, 0.0039183511398732662, 0.0039905859157443047, 0.0033781607635319233, 0.0049147759564220905, 0.0035390660632401705, 0.0037873159162700176, 0.0040883589535951614, 0.0038634135853499174, 0.0042145703919231892, 0.0044831614941358566, 0.0035860056523233652, 0.004222275223582983, 0.0035525865387171507, 0.0045618601143360138, 0.0047798887826502323, 0.0047394093126058578, 0.0041713346727192402, 0.0041924836114048958, 0.0034441282041370869, 0.0034401959273964167, 0.0051195635460317135, 0.0038007253315299749, 0.0053862445056438446, 0.0043143476359546185, 0.0035649791825562716, 0.0039480193518102169, 0.0047328798100352287, 0.0042525315657258034, 0.0033235601149499416, 0.0036198869347572327, 0.0040402188897132874, 0.0048678484745323658, 0.0041164313443005085, 0.0051269414834678173, 0.0040802974253892899, 0.0037530404515564442, 0.003055530833080411, 0.0031598471105098724, 0.0034158986527472734, 0.0041836169548332691, 0.0049458523280918598, 0.0043311375193297863, 0.0037631036248058081, 0.0047906190156936646, 0.0040016830898821354, 0.00381868751719594, 0.0038386036176234484, 0.0032011070288717747, 0.004626203328371048, 0.0033937382977455854, 0.0037940128240734339, 0.0034995449241250753, 0.0050816047005355358, 0.0046713212504982948, 0.0035832521971315145, 0.0032025293912738562, 0.0034393304958939552, 0.0057357498444616795, 0.0046188659034669399, 0.010003047995269299, 0.00302457669749856, 0.0051823295652866364, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[32] = { 2676, 1196, -669, 2345, -159, 1925, -15, -2678, -1245, 1358, 231, 995, 423, -68, 82, 46, 2315, 6007, 2733, 1817, 221, -172, -371, 2097, 619, -535, 106, 8277, -1154, 1296, 1512, -790, };
const TfArray<1, int> tensor_dimension10 = { 1, { 32 } };
const TfArray<32, float> quant10_scale = { 32, { 1.7220821973751299e-05, 1.5786677977303043e-05, 2.409908665867988e-05, 2.9298613299033605e-05, 2.2469799660029821e-05, 2.1242089133011177e-05, 2.5878411179292016e-05, 1.1116725545434747e-05, 4.142635953030549e-05, 1.2344344213488512e-05, 1.7831845980254002e-05, 1.2415111086738762e-05, 1.5634142982889898e-05, 1.389439421473071e-05, 1.4723074855282903e-05, 9.7804459073813632e-06, 1.6492254871991463e-05, 1.9253400751040317e-05, 2.7399473765399307e-05, 3.7212554161669686e-05, 1.9136999981128611e-05, 1.4356494830281008e-05, 2.1486759578692727e-05, 1.1416966117394622e-05, 1.7068168745026924e-05, 1.7655705960351042e-05, 3.1376461265608668e-05, 1.3716986359213479e-05, 4.296858242014423e-05, 3.5195174859836698e-05, 1.7681366443866864e-05, 2.5662480766186491e-05, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[32*1*3*65] = { 
  /* [0][0][][] */ 11,-63,-38,60,-28,20,15,-63,28,57,51,-85,-6,-42,43,-30,34,0,-9,65,19,49,-29,2,-38,-47,-17,-28,-10,34,-24,20,64,10,35,25,-8,11,-16,33,-49,-8,37,23,-15,14,48,-2,-44,-84,19,7,-56,12,-24,5,32,-62,20,-48,6,-49,-104,-53,-79, 17,-50,-51,4,-47,-6,-27,-60,11,61,40,-69,-21,44,-21,-4,27,-16,-13,-9,11,-34,49,1,-4,-42,-5,-8,-6,64,9,8,78,14,25,20,-4,38,78,-41,18,-3,-17,46,58,38,-10,36,28,-6,32,-11,-15,-14,43,-5,1,65,57,33,-73,-57,-127,-73,-127, 23,-14,-35,79,8,-13,-16,-33,-23,38,25,-57,1,-42,-28,-65,39,-59,22,40,-12,25,-43,-34,-51,-62,-14,-49,-57,-8,52,-23,35,-9,-9,-53,-73,41,-46,-43,-80,-43,-47,-68,-62,-23,-16,-61,-84,-76,-52,-31,-22,4,-6,-13,34,-58,1,-30,-12,-53,-47,-73,-91, 
  /* [1][0][][] */ -20,3,-30,10,-34,46,31,-69,-44,23,36,14,-44,9,-22,-24,-48,-63,-49,-35,-19,-40,-17,8,-24,-25,-12,-37,-23,-35,-16,-39,9,22,-61,-70,-14,-38,-26,-40,-52,-29,-4,-1,-42,28,19,7,-76,-57,24,19,-23,-27,-112,35,-9,-63,-114,-59,-83,-32,-39,-19,-101, -23,9,-33,21,33,75,35,1,55,52,26,18,-3,51,20,-32,93,36,-38,-27,9,5,105,-58,2,-22,6,7,-17,-81,-24,-44,-17,-18,-43,-36,14,2,36,-16,-21,-25,52,66,21,46,82,57,26,38,36,24,0,-26,-16,15,7,-61,-50,-121,-108,-127,-119,-107,-86, -8,24,-43,-23,-19,44,3,-90,-29,13,21,5,-67,-33,-53,0,-22,-46,-31,-22,-54,-15,41,-32,-12,3,40,22,-53,-4,0,-71,-8,60,17,28,-25,52,-10,-23,-23,-4,27,60,53,26,74,29,-41,-32,41,-5,-17,-55,-3,18,19,-60,-76,-23,-57,-94,-117,-61,-95, 
  /* [2][0][][] */ 17,-28,-23,3,39,48,33,-3,-3,3,21,-5,28,17,-13,-2,36,-9,-50,-43,0,-3,11,-17,-57,-22,16,-25,-19,3,-41,-25,13,-12,30,14,-26,4,33,22,-31,26,16,24,47,23,25,32,35,40,27,-5,7,28,-19,-79,-8,12,18,-51,-17,-56,-115,-127,-83, 13,-22,-32,-15,-8,22,53,-1,29,-26,3,-31,-1,-1,-9,-68,-41,-17,-76,1,-3,-25,60,35,-23,-57,-25,-25,-13,11,-14,-3,-44,11,-2,4,-18,-4,2,-3,-36,-24,9,29,-6,3,-7,-21,-16,4,-12,15,-10,15,-14,-12,20,11,3,-22,46,-34,-62,-73,-67, -8,-13,-7,39,24,-15,9,-1,18,-14,-12,-33,-8,-12,4,-24,-14,-1,-92,-33,-6,7,13,-21,-37,29,-58,-54,35,-5,-52,29,17,7,41,8,-17,-11,28,1,-35,16,-23,-34,-24,-19,-42,-42,-78,-4,32,0,30,22,-42,19,-4,26,-36,-30,-41,-27,-5,-15,-2, 
  /* [3][0][][] */ -17,15,1,17,11,9,25,50,42,22,-5,71,60,17,37,26,2,6,-20,-4,28,23,-41,23,-63,8,-45,-25,-22,10,-32,0,25,0,-58,-77,-43,-54,-58,-14,7,0,11,-15,-25,-17,43,-43,-88,-41,-35,0,-35,-30,-3,35,42,-69,-32,30,-1,44,56,34,77, -11,-13,-22,11,-8,2,7,2,11,38,-13,13,14,49,-23,39,-36,-42,4,-69,-33,2,-26,-20,-104,-41,-51,-48,-107,-44,-58,-39,37,-72,-29,-43,-49,-40,-89,-64,-32,-16,-1,28,36,11,-16,9,-9,-20,3,26,16,4,6,31,19,10,13,-34,-35,11,4,10,11, 6,-33,-14,-10,-2,-4,28,48,-12,12,38,51,12,-10,5,-12,-36,-28,-61,-6,-20,-40,-57,-40,-65,-65,-113,-38,-100,-65,-85,-127,5,-54,-1,-79,-76,-55,-4,-64,-25,-24,-15,15,31,11,-4,9,-8,-29,21,7,-23,-18,6,12,3,6,44,-91,-43,-21,33,4,51, 
  /* [4][0][][] */ 35,-46,-37,39,-14,3,-42,13,24,-66,59,-127,-11,-70,-47,-23,25,-49,-77,-33,23,41,-63,-30,-40,-13,-16,-40,-46,-40,-40,-62,-50,-66,-16,10,12,-16,-66,-45,-62,-24,-34,-53,-11,-26,4,-66,-7,-74,-21,3,-56,-23,-29,-24,-30,-44,2,-20,-7,-17,-26,-29,-3, 35,-10,-49,32,10,12,17,49,53,26,57,-96,-75,-62,-48,-33,17,-8,4,34,43,24,58,-8,-24,-13,-5,-67,-36,-46,-40,-8,-30,-42,-35,-31,-19,-46,-19,-46,-19,-54,-28,-1,12,-8,-9,-3,17,-24,37,-51,-72,0,9,-1,3,46,19,-22,-39,-8,-33,-45,-33, 3,-27,-50,10,19,6,11,24,60,-18,9,-64,-42,-23,24,-7,-27,-6,23,-18,23,10,-1,2,-11,-11,-38,-30,-58,-25,20,-30,-10,5,1,-6,22,-10,35,13,-28,-25,26,28,-2,20,-44,-8,-7,-35,6,50,-58,-7,43,2,-24,55,27,18,-12,10,21,20,5, 
  /* [5][0][][] */ -9,1,-9,11,-6,-1,48,-16,42,23,-21,-18,-24,-2,-27,-12,-61,-4,-26,-22,5,18,56,-54,15,9,2,47,-12,39,-11,-18,7,6,24,6,-31,-3,22,19,-27,-5,-28,-28,-29,-1,1,-38,4,23,-20,-47,-33,27,0,7,-12,13,-34,-127,-25,-32,-15,12,-15, 8,-39,-11,-30,36,19,36,35,33,40,-16,50,0,5,-31,-20,29,-11,-10,-25,28,1,32,2,17,1,7,23,-27,-11,-19,-64,-48,-34,29,40,-8,39,35,51,26,13,22,8,15,14,34,12,46,33,53,37,28,36,-13,17,34,-19,-50,26,34,24,38,39,61, 2,-29,-15,-28,-5,-5,24,-16,-6,29,29,0,-18,-20,-26,-41,-31,-21,-8,-35,-21,4,42,-46,-46,-23,-21,67,3,8,2,22,-25,0,-15,20,-23,18,3,-18,-31,-44,-72,-45,-50,-60,-40,-4,-25,4,-10,-4,1,30,48,-42,-4,-10,5,-55,-40,17,-5,17,-16, 
  /* [6][0][][] */ 27,-6,-45,-17,-17,-23,31,17,16,-20,-1,-16,15,-40,-15,26,7,-44,-50,7,3,-6,-31,-25,-64,-60,-42,-78,-83,1,-42,-81,-11,-21,-44,-17,-46,1,-37,-57,-4,-24,24,22,49,21,0,34,4,-13,0,17,-18,-12,37,-21,-58,30,-9,-19,-56,-18,-21,-28,-28, 24,-13,-36,25,-11,11,23,29,56,17,-20,-30,16,37,-24,2,30,33,7,-4,4,63,34,10,-30,-46,-33,-52,-16,-27,-33,-43,-30,-41,-16,-37,-21,-12,-48,14,2,23,10,3,3,-9,12,14,-29,-29,2,1,13,15,-27,8,-6,-11,-1,-77,-93,-105,-93,-104,-110, 24,-14,-44,-2,-24,8,32,2,-2,-4,0,4,22,-17,5,26,-37,-22,-103,-39,-31,3,-23,-27,-67,-52,-5,-77,-50,-12,-20,-77,5,-18,-17,19,-14,6,1,15,-16,2,29,23,48,28,16,4,-10,-54,21,32,11,19,10,3,-19,3,10,-37,-127,-115,-93,-75,-70, 
  /* [7][0][][] */ 56,63,-5,-30,17,-42,64,79,5,-35,-12,58,71,43,-41,-35,-27,31,26,9,16,10,-13,-25,37,28,-62,-26,-42,-60,-6,5,15,-53,43,-67,-56,-71,53,-2,53,-16,-68,-72,-93,-34,-47,-52,43,66,44,-3,-35,-127,-15,118,-19,-87,37,94,-14,-28,28,10,44, -32,40,75,-29,-5,-50,-14,-47,-24,-34,-11,99,65,12,-33,-29,-40,29,64,-53,-12,44,-17,55,12,74,47,-14,-32,76,25,-19,33,126,4,45,-42,5,-5,-48,-56,-45,-6,-53,-18,-36,-41,34,26,-29,-85,-17,66,-31,-63,51,60,63,27,38,20,19,38,56,61, -43,34,27,-28,-7,-10,40,62,-3,-43,-17,110,30,-7,-44,-99,-62,-26,7,42,27,-36,-8,50,-40,-79,-53,-49,-19,-88,7,-4,13,-26,12,-90,-36,17,-47,-25,-15,7,-4,-85,-68,9,16,-63,-45,43,6,19,-5,18,-50,33,36,1,9,98,77,21,60,36,-23, 
  /* [8][0][][] */ 8,12,-4,-11,-8,-8,-4,-35,-21,-2,2,-55,-61,-13,-30,-33,-69,-42,18,-34,-65,-127,-11,1,-30,-28,-34,18,29,44,29,-24,-26,-38,-45,-26,-24,6,4,-28,-16,-4,-17,-9,-11,-2,-4,-1,-13,-12,-14,-20,10,-6,6,26,4,13,1,30,48,24,19,-4,-4, -2,0,18,14,25,9,16,14,-16,9,18,-7,-16,4,1,-7,-19,6,27,-13,-10,-31,25,16,12,-34,-24,49,9,11,-19,-17,5,-15,-29,-11,-16,-8,36,35,5,-19,-7,34,22,37,30,-1,16,-5,14,-11,-23,7,7,4,0,33,-12,-23,-15,-14,-23,-45,-49, 10,16,-20,5,13,17,-15,-8,-22,11,4,-25,-31,-9,-24,-44,-40,-14,28,6,3,-15,-7,-24,27,0,-1,32,7,-5,-24,-7,6,22,21,-4,-28,-23,57,-10,9,15,21,17,16,11,26,30,8,16,-9,-16,-10,-2,1,-1,-1,-8,-19,-35,-42,-35,-59,-57,-48, 
  /* [9][0][][] */ -79,6,-43,-87,-19,-83,-27,-13,14,-33,4,116,65,-35,-20,33,3,109,96,-55,-44,29,-2,-35,12,-12,46,-10,-46,44,105,-27,-7,-31,22,29,44,0,-37,58,32,90,38,-30,-26,-42,-84,-111,-25,31,-28,-74,-41,-122,-68,-40,-36,-68,-5,49,20,48,31,43,24, 33,48,12,-29,-29,-50,-25,22,-11,-15,42,65,77,105,54,-30,6,25,23,-4,36,-21,8,-17,-92,-8,39,1,10,44,-10,-17,39,35,79,42,55,14,-15,15,39,33,-23,-19,-46,-76,-101,-109,-2,84,-10,10,-65,-95,15,-57,-88,-114,-60,28,37,-23,62,-32,15, 86,-49,42,-81,-38,-30,34,54,16,-35,-23,37,116,66,54,0,-55,9,14,-41,-39,22,-1,0,37,0,7,-28,10,47,5,1,-11,0,56,73,-1,-2,36,58,88,81,-33,-26,-89,-122,-62,-104,18,-25,-44,-21,-112,-117,-103,-127,-42,-70,-92,31,68,18,73,36,73, 
  /* [10][0][][] */ 36,-13,-11,-18,-53,15,-30,-55,-8,-1,-4,-127,-119,-7,-8,49,26,-74,-18,44,15,-46,-40,-42,-21,-35,-95,-67,-65,18,30,22,8,22,54,18,13,-40,-25,-36,23,-34,63,-10,62,-8,-1,28,38,7,-10,33,-12,3,42,-27,-7,29,12,-51,-74,-60,-78,-100,-83, 6,44,-14,14,-49,28,-28,-5,-9,-13,13,29,-23,-58,-9,45,24,-18,10,45,12,66,29,10,6,4,9,-48,63,-13,62,66,16,16,44,56,28,-33,-23,-16,3,-18,35,45,31,26,3,20,2,-75,-44,-1,34,-63,-1,2,0,28,-16,42,-27,-15,-45,4,-59, 19,42,-3,-13,-82,-34,-9,-58,-35,26,-22,-43,-54,-55,39,-9,37,-65,-7,71,-59,-64,-81,-17,-7,-38,-28,-127,10,-34,-16,-9,12,28,70,31,39,-26,-29,15,-47,-32,33,-28,49,18,-12,32,-2,-1,13,-39,-39,-52,-24,16,-6,-81,-24,62,-51,-40,-44,-102,-87, 
  /* [11][0][][] */ -25,-21,-35,-2,75,62,5,8,-5,-19,-9,-30,-7,-21,5,39,-2,5,30,-27,75,80,87,30,5,47,53,-31,25,-102,-60,-69,-25,-22,-10,55,-34,84,29,-66,65,-6,-52,-45,-127,-55,-2,-7,58,-9,8,-7,18,-30,-8,-42,68,29,-58,24,74,109,88,89,106, 63,13,9,-15,113,43,24,-44,-46,-56,78,-57,-42,-58,-40,14,0,26,16,12,-9,25,19,-8,40,81,57,108,61,-16,-13,-88,-56,-17,20,5,26,-4,13,3,-30,-118,-83,-17,-16,17,62,-14,44,73,-45,-18,-56,25,-4,-16,-8,-49,7,-20,-56,-82,-63,-7,-84, -18,-27,-38,-39,30,-16,-93,-32,-30,16,29,-18,-39,-53,53,-66,-86,-29,48,14,-6,55,-25,-36,-42,44,-24,49,45,-23,53,15,-109,-32,-57,-58,-46,-2,24,-2,54,21,-95,-59,-32,5,-1,-10,52,13,113,-37,37,-22,12,7,4,-53,-74,3,26,-2,-25,-69,-6, 
  /* [12][0][][] */ -18,-3,-23,21,4,22,63,-44,-10,-17,-29,-54,-121,12,-28,9,32,26,-104,-16,-127,-38,-13,-7,51,17,-47,24,34,58,17,-16,62,-13,43,-50,-11,-119,-13,-73,-46,-82,-58,-67,-99,-19,-7,1,-51,-23,71,-16,35,4,-13,-14,-44,32,-103,-83,-26,72,109,62,121, -12,-56,42,-11,58,49,65,-1,-62,-24,-10,-25,-18,-38,-37,-41,-32,24,-115,-35,11,7,5,17,28,-4,0,32,-17,-9,-60,13,-46,-36,-1,18,-93,22,18,-25,-2,-18,0,65,31,4,40,63,-32,-16,109,12,33,-10,-15,23,-70,-15,-12,-25,-13,4,-16,-27,-25, -9,-13,-21,-6,37,62,118,17,47,-42,33,-44,-109,-52,-47,-21,3,-8,-74,26,-42,-44,-24,-36,29,-50,37,32,-19,-22,-87,-63,-68,-27,37,-9,-62,11,36,70,-6,-8,39,67,8,47,58,50,49,29,72,-14,-4,18,-41,-34,-32,-19,-68,-62,-39,-3,29,13,10, 
  /* [13][0][][] */ 2,35,59,-19,16,-27,-30,75,-31,-33,-72,53,29,52,39,-10,26,-1,48,33,-64,-23,16,36,-43,24,-11,-21,-23,-34,69,22,-30,-54,-58,-6,10,-36,-61,-28,19,-11,7,17,-37,15,-52,-3,-66,21,-10,-10,0,-4,-35,42,39,13,-13,-1,-66,-65,-127,-120,-91, -30,74,60,-19,-30,-45,26,52,-18,-54,-92,27,119,81,58,50,20,30,6,15,-18,31,-25,-1,-4,16,31,13,-1,-21,-8,85,0,36,-9,-11,28,-43,-95,-11,-49,12,0,-26,-2,3,33,7,-12,9,3,2,-18,-81,-19,41,-6,-96,-19,26,-47,-23,-86,-46,-36, -24,23,8,-3,-9,-36,11,10,-6,-41,-45,3,29,37,44,55,-66,8,-2,1,-23,-10,-56,42,-41,26,21,36,30,55,47,53,67,51,-16,-40,-20,-7,-5,-6,-22,45,42,32,-11,25,-40,-6,-36,-15,12,37,37,10,17,24,-8,50,10,29,-15,-33,1,17,20, 
  /* [14][0][][] */ 48,-9,-14,8,64,11,-69,-80,-89,50,-38,-6,27,16,-29,-37,52,10,42,70,5,-88,1,-30,-9,-40,51,2,57,-58,-45,-85,-127,-107,-71,38,62,21,-2,-36,2,-30,-9,28,-17,73,26,20,5,-57,-44,-16,9,14,19,-12,39,50,-38,13,117,86,47,93,17, -59,24,-10,19,29,39,-96,-100,-72,12,-29,-50,48,14,40,40,-4,-20,-24,50,38,-1,-28,-45,38,78,70,29,-3,-34,20,-98,-81,-50,-87,-7,-35,-46,5,8,24,-10,-37,-51,20,62,11,83,-3,112,-34,19,-67,6,3,0,-35,-18,-36,-58,110,14,-40,-7,3, -5,-6,21,26,28,-10,-106,-31,-95,-23,24,11,44,50,55,6,-14,-4,16,40,28,-46,-39,-11,58,43,17,53,78,-25,11,9,-36,-88,-40,-51,-53,-41,-21,18,58,60,2,20,-32,-24,47,45,51,-62,-69,-38,-60,-23,9,32,-9,53,6,-87,0,-48,52,-13,3, 
  /* [15][0][][] */ 13,20,-35,-40,78,69,-52,15,37,26,61,-32,25,47,4,60,-4,12,27,20,-43,-48,43,11,-1,8,109,30,-32,-127,-98,-81,-26,-31,-59,46,32,52,120,32,31,4,-52,-33,-27,66,1,85,115,94,-90,63,-51,2,-103,25,1,-6,-47,-32,-7,30,-50,-21,-23, 62,-10,18,-38,13,-46,33,-21,-1,0,31,-25,-60,-24,5,-17,50,24,-28,10,-53,-81,-40,-10,-49,0,-55,84,-45,-76,-56,14,-84,63,-45,-57,-46,-70,60,-47,57,42,18,-30,13,-32,-50,30,81,125,-9,31,-36,69,-55,-59,-81,-6,3,-57,77,-22,9,-15,9, -70,-23,-13,-25,-53,45,-70,-28,67,46,10,-9,-21,-30,99,59,12,64,37,37,-76,-54,-81,-12,-18,37,13,12,2,-77,-5,-65,-30,-33,-50,11,39,63,99,68,1,71,-35,-53,-24,-57,55,54,-25,-10,6,0,52,3,-67,-33,-73,65,-12,-12,89,60,47,3,31, 
  /* [16][0][][] */ 3,27,-2,-72,-12,23,-45,-17,52,8,3,70,7,12,-23,-20,-2,-22,-47,-58,2,-36,-56,-40,31,-38,-3,-1,-3,74,4,-20,-3,-6,64,6,-5,9,-18,30,-18,34,-17,-39,-44,-33,-8,23,68,32,8,-17,-45,6,-44,-21,-59,-83,-58,38,58,90,62,75,28, 58,-20,-13,-25,12,35,38,26,50,9,73,4,-12,-28,-49,21,-73,40,-18,-15,7,-2,-14,29,29,26,21,35,24,77,63,24,23,46,24,11,17,-1,-14,2,24,24,-39,-33,-61,-35,-38,-37,-14,38,12,-24,-17,-47,-100,-125,-126,-91,-50,-30,-11,25,49,9,38, -47,8,-7,-34,-6,25,-37,19,15,-55,-14,-55,-25,-21,-27,14,-43,32,3,-24,-48,-1,13,3,9,55,36,20,47,90,49,62,3,44,71,43,-2,33,18,2,2,30,-66,-54,-15,-34,-64,-21,14,25,-2,11,2,15,-12,-77,-40,-90,-1,61,86,60,121,127,56, 
  /* [17][0][][] */ -99,-11,27,-18,57,60,-36,42,28,-5,-73,41,-68,-37,-31,-38,-47,-43,20,27,53,93,46,-1,48,-36,-22,6,3,13,15,47,64,-7,8,16,-23,-52,-84,-60,-30,-51,41,38,3,38,-13,-2,30,-2,-20,3,1,38,37,17,39,-1,75,-27,-20,-42,19,58,22, -79,-21,31,-32,31,73,13,40,-19,-5,-65,-10,-16,-33,-12,-7,-38,-39,-13,14,52,10,-53,-4,5,97,35,-98,-25,-23,-91,14,-11,-52,-50,-55,-7,-101,-81,14,12,-3,6,33,13,7,37,-32,-40,-55,-15,71,11,24,77,28,-37,-32,41,-22,-100,-112,-95,-76,-99, -81,-11,34,-68,-1,25,-13,-1,78,24,-70,-13,-27,10,4,-63,-66,-75,-7,-22,28,11,7,69,39,55,-52,-65,18,-40,3,80,21,16,-28,-14,16,-10,-96,7,-4,-18,38,-12,7,9,-19,17,16,-61,-16,51,16,18,86,29,-20,69,65,-42,-127,-123,-85,-30,-27, 
  /* [18][0][][] */ -52,29,-12,-77,-10,-5,-92,3,34,16,9,18,43,28,30,-2,40,21,-14,2,-40,-57,-111,7,33,-20,-6,1,53,2,-16,5,-14,-3,-22,-22,24,20,27,-1,24,-23,-11,15,29,13,12,3,20,3,-33,-23,-22,-93,-12,-44,-19,-41,33,-23,82,36,-5,23,-14, -8,19,-20,-78,-22,-24,-127,-14,12,6,25,-29,41,-19,11,5,16,-25,2,29,2,-108,-121,-5,-23,23,4,-37,17,58,24,8,14,3,-8,12,6,-5,-31,25,16,32,-1,3,11,-8,7,31,-2,8,2,-60,-51,-30,-43,-10,-17,-6,4,-30,52,-11,-77,-44,-65, 11,19,-11,-59,-29,-2,-65,28,32,-2,1,15,-40,-14,-3,24,-17,18,21,-4,-2,-105,-37,-52,20,-20,4,-4,-14,9,42,35,14,-11,19,-33,8,-7,16,-21,9,39,20,-2,28,18,0,5,18,-13,-7,-42,-21,-34,-21,-18,-4,-27,18,-30,11,-26,-54,-76,-45, 
  /* [19][0][][] */ -2,15,0,-10,38,22,37,26,25,-37,-4,20,-5,2,-19,-1,29,39,-6,-30,23,18,31,-33,-37,-19,30,36,18,-27,17,-4,2,5,25,45,20,13,-4,-51,-63,-40,-75,-51,-62,-28,2,-28,23,41,38,-7,-24,5,6,9,0,-30,17,-2,28,44,33,47,32, -20,-1,9,-28,9,-3,7,-9,-3,-37,10,6,-17,-33,-33,-15,-31,31,22,-22,-18,26,13,34,12,30,25,22,-21,17,2,11,-16,16,3,12,-11,-16,-15,-25,-34,-13,-100,-95,-63,-69,-33,-94,-36,0,61,-7,-15,-11,3,-2,-23,-14,29,58,75,72,53,22,32, 7,-2,9,1,17,-10,-3,16,-11,-38,-13,-42,-44,-51,-29,-24,-35,17,-28,-14,-8,8,-13,-8,-10,8,5,21,34,-5,27,27,-13,-1,32,34,-33,-38,3,-13,3,-25,-48,-72,-127,-69,-83,-83,-15,-42,59,-2,-14,24,9,-18,-3,-2,16,27,6,12,35,36,37, 
  /* [20][0][][] */ -1,6,-14,43,-26,1,-2,-77,10,0,85,-60,-23,-14,-24,-14,34,-49,-7,15,-18,55,-44,-59,-101,-6,4,-33,61,-6,-29,76,-18,-112,-23,-8,-7,-50,40,-7,-71,43,-26,126,67,23,36,-3,-27,-24,-9,29,-3,37,46,-5,-42,29,5,-10,-19,40,5,19,3, -10,-7,-21,15,22,89,-7,-65,73,-14,58,-89,-69,2,22,-42,34,19,20,-35,53,12,13,-61,-45,-30,-35,-80,33,-11,-20,-38,17,16,-75,-13,-56,-31,-47,14,-16,20,41,127,70,41,2,-22,-29,-34,44,-42,48,49,45,31,3,-9,-9,9,-66,-63,-47,4,-50, 8,-1,-24,54,-12,9,3,-70,-26,-41,-7,-93,-59,-9,-52,-90,26,48,34,-69,-73,-31,-60,-65,-41,-34,-24,-14,-62,1,-59,-29,39,-12,-108,-61,-84,-12,-3,15,-104,-42,-8,8,22,10,14,-20,9,-38,-67,-15,-60,33,11,-9,9,56,-18,-14,-11,-10,4,29,-3, 
  /* [21][0][][] */ -6,-14,-11,26,-18,48,13,-56,33,48,38,-53,-61,0,25,34,-10,-2,-26,-4,39,-11,2,-41,-22,-37,16,0,-36,5,-22,-10,-3,12,-2,8,-3,-1,-35,42,-7,27,37,11,66,-1,52,37,-28,42,-29,-1,17,58,-11,-9,-3,-15,-43,20,-80,-61,-111,-89,-111, -1,-8,2,-16,-22,30,-29,-11,50,46,16,-30,-6,16,-17,50,-11,-4,30,35,-8,-25,43,-57,-11,12,7,37,-16,-59,-48,-27,-28,13,-15,-44,-8,12,50,-14,-18,39,-25,58,6,-23,5,66,66,36,25,-61,42,3,-37,36,7,5,-2,-53,-43,-49,-127,-105,-107, 4,14,-32,18,-29,21,6,-33,-15,-37,80,-35,-53,7,-15,40,-6,24,8,-37,13,-12,5,-32,-10,14,8,8,-28,-40,-11,-18,-32,33,-20,-28,-34,16,-12,-2,20,51,1,53,75,-17,14,39,47,51,-17,4,-12,11,-34,-4,18,-16,-31,-28,-18,-37,-96,-78,-52, 
  /* [22][0][][] */ -3,2,-6,-31,-22,14,50,-30,-18,-29,58,-3,-15,2,-6,-21,-31,-11,-31,-3,-28,-15,37,-16,-7,3,-15,-3,38,-33,-7,-22,-13,-6,39,-1,17,-2,-12,34,4,12,-11,27,17,35,53,46,1,52,24,4,-16,7,-12,-48,-47,-73,-37,0,-1,10,-24,-7,-31, -4,8,-30,49,-41,4,-18,14,44,-33,49,9,-22,25,-5,-13,14,-14,-8,8,17,-20,74,-7,-3,-9,3,26,-13,15,6,-29,-15,-25,-12,27,17,58,8,-3,9,44,37,37,43,26,45,44,-8,-4,30,-11,-47,-29,-29,-60,-22,-33,-46,-24,-46,-32,-65,-65,-51, 10,1,17,50,-52,40,13,-23,27,-43,19,-9,6,-21,-27,-20,-67,-33,-24,-17,18,18,9,12,28,-17,-27,5,5,21,59,-58,55,51,1,29,-42,-4,-25,-35,-57,4,-56,-73,-40,-57,-54,-35,-96,-33,-37,-59,-26,-70,-20,-107,-97,-127,-27,7,-28,47,38,47,32, 
  /* [23][0][][] */ -15,-31,91,-54,12,-56,40,-5,-19,-18,25,85,103,-53,-20,18,-73,-44,14,-90,-21,29,-6,-28,28,61,12,28,-1,54,55,75,19,57,97,41,27,-21,53,-15,-60,-18,-72,-96,-66,-105,-19,-98,-97,42,87,57,1,2,8,-24,-18,26,8,72,48,63,13,33,44, -8,23,86,48,13,23,76,86,-1,-3,61,44,86,43,-96,-2,-39,2,-9,-73,-22,-2,-11,-46,-18,-12,40,39,27,16,73,90,-9,-1,46,50,-14,-45,-42,-73,-64,-70,-106,-109,-120,-65,-98,-115,-120,44,-90,-17,97,29,-40,-1,-51,101,1,-43,-17,-20,4,-18,-46, -52,11,-39,-21,-27,23,67,-3,69,-17,-56,72,1,-86,-56,28,-76,8,4,-90,-24,-26,5,-23,-26,-57,-48,-34,25,3,85,-10,-12,76,-23,40,14,19,-40,-49,-67,-39,-109,-72,-74,-75,-127,-20,-9,-64,-15,-16,-15,-45,-10,-34,-26,-69,34,75,27,49,60,1,76, 
  /* [24][0][][] */ 18,-20,-49,26,-5,35,-91,38,-38,47,3,-40,30,29,57,12,12,29,24,51,6,-17,-73,32,-32,16,45,-51,10,-38,-11,-8,-10,-110,-81,-9,-1,10,-12,-4,-10,36,47,14,-10,27,61,-19,21,-38,-70,-49,21,-70,3,21,-37,-80,-91,-94,-2,-28,-96,-75,-84, -26,38,23,58,0,4,-121,-11,-48,27,-11,-57,41,18,41,58,10,-28,33,82,20,10,7,-15,60,4,69,-38,-11,-46,-45,-58,-87,-60,-45,8,-21,-41,-41,37,-46,7,31,42,70,29,-29,-1,1,-24,-40,-26,-47,31,82,14,44,4,-127,-70,-2,-80,-64,-42,-45, 5,-25,-2,28,39,-30,-79,14,-47,-24,14,-6,13,-12,16,32,51,15,46,55,83,-67,3,-27,39,32,18,-1,-36,-69,-35,-104,-60,-91,-13,-25,-6,-74,-20,-8,40,-24,0,11,-18,20,2,71,-9,19,-73,-28,29,11,-47,-8,-6,60,-82,-41,-12,-12,-79,-76,-57, 
  /* [25][0][][] */ 17,23,-53,18,6,18,-43,-66,49,-59,-14,-12,2,18,-28,-7,30,0,-3,-27,-35,31,31,-7,-32,1,36,-13,-9,-36,-21,-71,-78,-65,-76,-54,-31,-76,-46,-61,4,-28,-23,73,30,-9,26,55,-19,27,6,-49,-17,3,26,-127,-35,-10,-76,-72,-29,-19,-24,-49,-77, 0,-31,-16,55,-30,13,-41,17,16,-43,37,-24,-20,-2,18,9,59,15,36,-7,-10,42,18,-5,-34,-10,25,-26,-18,-72,-52,-42,-67,-65,-101,-62,-48,-17,-64,-34,-22,-52,63,61,45,25,25,-31,4,-49,-38,42,-62,24,-16,-16,19,37,-63,-75,-20,-27,-41,-24,-64, 14,-26,-50,12,16,23,-27,-13,37,54,44,-50,11,35,5,-11,33,27,26,52,0,5,40,4,-7,9,9,-16,17,-51,-32,-70,-9,5,-36,-4,-7,-26,-6,-14,-32,22,50,51,30,36,-24,37,-11,-2,3,-10,5,40,38,17,-49,28,-44,-44,-83,-101,-72,-60,-34, 
  /* [26][0][][] */ -5,14,-14,11,-6,-5,-68,26,0,-22,-76,-25,4,31,9,29,-14,-9,-18,-16,-30,53,6,5,-27,-14,-30,-46,-29,-30,1,-6,0,39,-7,41,-30,-32,-33,-8,8,13,25,13,8,17,-26,9,13,30,26,38,5,-56,3,-7,21,5,-8,-81,-104,-73,-44,-47,-46, -4,-9,7,-5,4,-25,-60,31,1,12,-81,-28,30,2,46,25,-55,-3,26,25,-29,-26,-7,11,-24,7,61,-12,1,-58,14,26,12,0,-11,18,0,-6,-57,-10,10,23,18,16,38,1,18,8,31,-25,-34,-18,32,-25,-15,-12,-21,-25,-63,4,-22,-73,-102,-110,-127, 13,8,22,0,19,-8,-26,7,19,21,-93,-26,17,24,39,30,-14,1,28,-5,-58,-26,5,-14,20,10,-30,-61,4,18,-9,5,-48,31,-2,19,13,-18,-16,-24,-21,11,25,0,11,-2,14,15,21,11,25,23,8,1,31,-9,-10,-39,-26,-49,-58,-84,-56,-40,-38, 
  /* [27][0][][] */ -64,-37,-41,24,-10,35,-45,-26,18,88,-4,-12,-41,-25,-22,-15,-36,17,-22,-20,8,55,60,-15,-7,-8,-1,-1,-62,-34,-3,-15,4,-13,-46,41,-23,40,30,-6,30,-28,-2,34,66,47,22,33,31,42,-3,-19,12,45,45,-29,-68,-45,23,29,-98,-52,-127,-75,-125, -59,-58,2,-12,-46,22,3,-87,11,66,22,28,-52,-12,-30,-57,-58,-16,-27,-14,-6,23,55,-13,-44,29,-62,-3,-52,-20,39,-38,10,-20,-44,-34,9,-54,-24,20,-46,-71,-6,-18,9,-37,-17,-9,28,-37,6,-62,12,22,14,38,-29,8,-32,8,-37,-12,-36,16,34, -44,-63,-22,26,66,-23,19,-31,49,84,-6,-12,-14,14,-49,-2,36,0,45,22,40,38,84,-29,-40,-1,-45,33,-35,-2,27,44,5,18,43,34,43,6,18,20,-5,-1,9,0,45,57,71,27,55,50,46,46,-6,27,-37,19,-2,-17,-29,-51,-10,-74,0,-3,-24, 
  /* [28][0][][] */ 14,13,2,4,-44,-32,51,-9,-5,-112,-4,-63,-36,-23,-85,72,15,16,-100,-2,-42,6,16,-27,-24,-17,-35,-12,-23,-12,0,-48,-34,-3,-11,1,10,0,26,-7,-4,-4,4,-3,5,6,-5,10,3,12,-12,14,25,7,-2,-2,-20,18,29,13,8,-9,-24,-19,-24, 8,8,5,-8,-11,-28,69,28,3,-120,16,11,24,7,-66,43,-3,46,-68,-43,-6,15,51,9,12,-18,-34,-30,0,-33,-69,-34,-19,21,-23,-7,-14,0,9,-6,-19,-13,-17,14,-4,-13,-10,-5,8,4,4,-15,21,17,-12,4,-4,18,1,-19,-30,-23,-30,-33,-37, 10,10,-13,-3,-38,-46,43,8,16,-127,-5,5,-12,3,-77,18,11,9,-87,-43,-26,4,6,-24,-13,2,8,0,10,10,-31,0,-19,4,4,15,22,22,32,41,21,12,21,31,13,32,10,10,21,-6,-11,17,-5,15,-2,-24,0,12,-1,19,-3,-19,2,-29,-25, 
  /* [29][0][][] */ -4,15,29,-3,19,-29,17,39,-7,-13,-68,75,-9,27,24,26,1,-40,-68,-40,7,5,45,1,-56,-25,-10,-65,-68,-109,-80,-16,-43,-17,-30,-11,-67,-1,-17,-20,12,-10,22,48,10,1,27,0,11,-15,72,12,-22,-53,-28,46,-38,-19,20,10,-60,-33,37,48,4, -7,7,12,-3,3,-37,19,9,-20,-25,-122,35,38,-7,-3,-3,2,-37,-20,-30,30,17,55,-16,13,15,-85,-75,-79,-127,-111,-101,-58,-43,-26,-32,-48,-9,16,17,4,23,30,17,35,20,7,-10,1,6,-5,-21,14,-103,-40,-2,-27,-67,24,30,-32,1,28,17,39, -10,-3,12,-10,30,9,13,15,-41,-8,-45,72,19,25,-9,24,-16,-37,-36,-15,-10,15,2,-5,-24,11,-80,-85,-115,-109,-17,-17,-67,-50,-5,5,-40,40,32,16,35,-4,1,44,31,18,16,8,3,-42,17,-40,29,-117,-111,-95,-96,1,25,8,3,-14,36,-5,-11, 
  /* [30][0][][] */ 10,-6,5,-9,11,16,-49,-32,-5,1,-55,-47,-4,-33,61,7,9,31,76,25,-5,22,-36,8,-1,60,-12,-14,23,25,59,17,19,13,-2,-12,-13,-27,-4,30,-30,-12,10,11,42,7,-22,-11,41,57,-14,30,28,50,39,21,81,14,-6,17,30,54,23,40,35, -22,40,17,7,-7,-7,-99,30,-59,-77,-82,-106,-40,-19,-17,-42,1,36,87,20,-62,3,-29,0,17,-23,47,2,-27,2,68,42,-16,7,-10,-37,43,-53,-32,33,-3,6,8,30,27,2,-45,-22,37,43,32,-4,23,12,20,5,8,-54,-9,-38,2,-19,-39,27,1, -1,-25,-8,-18,5,22,-104,-29,-36,60,-73,-127,-76,-40,-13,-9,-1,6,52,-25,-9,-47,-48,-22,-26,32,50,-57,-18,-26,44,-21,3,-71,-34,42,-19,-20,-62,-18,23,26,23,-27,-11,34,32,38,35,8,7,-35,9,-40,-8,21,5,22,-22,37,6,-35,-57,-48,-21, 
  /* [31][0][][] */ 12,26,-7,4,27,12,-31,-37,-64,-17,11,-17,-65,-67,-39,-11,-68,-50,28,4,25,-53,-76,-13,19,39,39,24,56,-22,18,-59,-35,-79,-61,-9,-40,-26,36,14,30,-5,17,-3,2,1,-10,-15,-11,6,21,-13,4,5,3,32,-15,6,-19,-22,50,23,25,5,-23, 10,-21,25,-32,41,27,-9,-27,-44,-4,8,-127,-57,-48,-40,-31,-102,-44,51,23,36,-37,-108,-1,-9,-13,-21,69,59,40,6,-19,-85,-69,0,-59,-55,9,-19,33,17,-4,-40,-37,17,32,-22,-4,13,6,0,11,-5,28,-13,-2,33,0,-17,-18,-8,-2,29,6,26, -8,32,-8,1,42,29,-56,-44,-51,-3,11,-62,-63,-49,-7,-49,-94,-26,62,64,25,-111,-74,-43,68,43,28,28,40,40,4,0,-101,-30,-1,-64,-66,-43,18,34,-4,7,6,-6,48,21,19,11,4,52,11,-31,6,-8,7,27,7,2,21,16,72,24,26,7,4, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 32,1,3,65 } };
const TfArray<32, float> quant11_scale = { 32, { 0.0043913093395531178, 0.004025602713227272, 0.0061452668160200119, 0.0074711460620164871, 0.0057297986932098866, 0.0054167322814464569, 0.0065989946015179157, 0.0028347647748887539, 0.01056372094899416, 0.0031478076707571745, 0.0045471205376088619, 0.0031658532097935677, 0.0039867060258984566, 0.0035430702846497297, 0.003754383884370327, 0.0024940136354416609, 0.0042055249214172363, 0.0049096168950200081, 0.0069868653081357479, 0.0094892010092735291, 0.0048799347132444382, 0.0036609058734029531, 0.005479123443365097, 0.0029113262426108122, 0.0043523828499019146, 0.0045022047124803066, 0.008000996895134449, 0.0034978312905877829, 0.010956987738609314, 0.008974769152700901, 0.004508748184889555, 0.0065439320169389248, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,79,65 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,79,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.010086609981954098, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,79,1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.010086609981954098, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,40,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.010086609981954098, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,40,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.010086609981954098, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,40,64 } };
const TfArray<1, float> quant17_scale = { 1, { 0.011537014506757259, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,40,1,64 } };
const TfArray<1, float> quant18_scale = { 1, { 0.011537014506757259, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,20,1,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.011537014506757259, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,1280 } };
const TfArray<1, float> quant20_scale = { 1, { 0.011537014506757259, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.47352191805839539, } };
const TfArray<1, int> quant21_zero = { 1, { 44 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5136), (TfLiteIntArray*)&g0::tensor_dimension0, 5135, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 6240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 5135, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5136), (TfLiteIntArray*)&g0::tensor_dimension13, 2528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 2528, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2528), (TfLiteIntArray*)&g0::tensor_dimension15, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2560), (TfLiteIntArray*)&g0::tensor_dimension17, 2560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 2560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2560), (TfLiteIntArray*)&g0::tensor_dimension19, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1280), (TfLiteIntArray*)&g0::tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
